/*
 * Copyright (c) Mirth Corporation. All rights reserved.
 * http://www.mirthcorp.com
 *
 * The software in this package is published under the terms of the MPL
 * license a copy of which has been included with this distribution in
 * the LICENSE.txt file.
 */

package com.webreach.mirth.client.ui;

import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.prefs.Preferences;

import javax.swing.JOptionPane;

import com.webreach.mirth.client.core.ClientException;
import com.webreach.mirth.client.ui.components.MirthFieldConstraints;
import com.webreach.mirth.client.ui.util.FileUtil;
import com.webreach.mirth.model.ServerConfiguration;
import com.webreach.mirth.model.converters.ObjectXMLSerializer;
import com.webreach.mirth.model.util.ImportConverter;

/**
 * The main configuration panel.
 */
public class SettingsPanel extends javax.swing.JPanel {

    private static Preferences userPreferences;
    private Properties serverProperties;
    private Frame parent;

    /**
     * Creates new form SettingsPanel
     */
    public SettingsPanel() {
        this.parent = PlatformUI.MIRTH_FRAME;
        initComponents();

        this.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                showSettingsPopupMenu(evt);
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showSettingsPopupMenu(evt);
            }
        });

        usageStatsMoreInfoLabel.setToolTipText(UIConstants.PRIVACY_TOOLTIP);
        usageStatsMoreInfoLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }

    /** Shows the right click popup menu */
    private void showSettingsPopupMenu(java.awt.event.MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            parent.settingsPopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        backupPanel = new javax.swing.JPanel();
        backupButton = new javax.swing.JButton();
        restoreButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lastBackup = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        smtpPassword = new com.webreach.mirth.client.ui.components.MirthPasswordField();
        passwordLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        smtpUsername = new com.webreach.mirth.client.ui.components.MirthTextField();
        requireAuthenticationYes = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        requireAuthenticationNo = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        defaultFrom = new com.webreach.mirth.client.ui.components.MirthTextField();
        jLabel11 = new javax.swing.JLabel();
        smtpPort = new com.webreach.mirth.client.ui.components.MirthTextField();
        smtpHost = new com.webreach.mirth.client.ui.components.MirthTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        secureConnectionNone = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        secureConnectionTLS = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        secureConnectionSSL = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        serverSettings = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        clearGlobalMapYes = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        clearGlobalMapNo = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        checkForUpdatesLabel = new javax.swing.JLabel();
        checkForUpdatesYes = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        checkForUpdatesNo = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        sendUsageStatsLabel = new javax.swing.JLabel();
        sendUsageStatsYes = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        sendUsageStatsNo = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        updateUrl = new com.webreach.mirth.client.ui.components.MirthTextField();
        updateUrlLabel = new javax.swing.JLabel();
        usageStatsMoreInfoLabel = new javax.swing.JLabel();
        clientSettings = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        intervalTime = new com.webreach.mirth.client.ui.components.MirthTextField();
        rowHighlightYes = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        rowHighlightNo = new com.webreach.mirth.client.ui.components.MirthRadioButton();
        messageBrowserPageSizeField = new com.webreach.mirth.client.ui.components.MirthTextField();
        jLabel3 = new javax.swing.JLabel();
        asteriskLabel = new javax.swing.JLabel();
        asteriskLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        backupPanel.setBackground(new java.awt.Color(255, 255, 255));
        backupPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(204, 204, 204)), "Server Configuration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        backupButton.setText("Backup...");
        backupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupButtonActionPerformed(evt);
            }
        });

        restoreButton.setText("Restore...");
        restoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Last configuration backup:");

        lastBackup.setText("None");

        javax.swing.GroupLayout backupPanelLayout = new javax.swing.GroupLayout(backupPanel);
        backupPanel.setLayout(backupPanelLayout);
        backupPanelLayout.setHorizontalGroup(
            backupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backupPanelLayout.createSequentialGroup()
                        .addComponent(backupButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(restoreButton))
                    .addGroup(backupPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastBackup)))
                .addContainerGap(346, Short.MAX_VALUE))
        );
        backupPanelLayout.setVerticalGroup(
            backupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backupPanelLayout.createSequentialGroup()
                .addGroup(backupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lastBackup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(restoreButton)
                    .addComponent(backupButton))
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(204, 204, 204)), "Email", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        smtpPassword.setToolTipText("Password for global SMTP settings.");

        passwordLabel.setText("Password:");

        usernameLabel.setText("Username:");

        smtpUsername.setToolTipText("Username for global SMTP settings.");

        requireAuthenticationYes.setBackground(new java.awt.Color(255, 255, 255));
        requireAuthenticationYes.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup2.add(requireAuthenticationYes);
        requireAuthenticationYes.setSelected(true);
        requireAuthenticationYes.setText("Yes");
        requireAuthenticationYes.setToolTipText("Toggles authentication for global SMTP settings.");
        requireAuthenticationYes.setMargin(new java.awt.Insets(0, 0, 0, 0));
        requireAuthenticationYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requireAuthenticationYesActionPerformed(evt);
            }
        });

        requireAuthenticationNo.setBackground(new java.awt.Color(255, 255, 255));
        requireAuthenticationNo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup2.add(requireAuthenticationNo);
        requireAuthenticationNo.setText("No");
        requireAuthenticationNo.setToolTipText("Toggles authentication for global SMTP settings.");
        requireAuthenticationNo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        requireAuthenticationNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requireAuthenticationNoActionPerformed(evt);
            }
        });

        jLabel12.setText("Require Authentication:");

        jLabel1.setText("Default from Address:");

        defaultFrom.setToolTipText("Default \"from\" email address used for global SMTP settings.");

        jLabel11.setText("SMTP Port:");

        smtpPort.setToolTipText("SMTP port used for global SMTP settings.");

        smtpHost.setToolTipText("SMTP host used for global SMTP settings.");

        jLabel10.setText("SMTP Host:");

        jLabel5.setText("Secure Connection:");

        secureConnectionNone.setBackground(new java.awt.Color(255, 255, 255));
        secureConnectionNone.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup6.add(secureConnectionNone);
        secureConnectionNone.setSelected(true);
        secureConnectionNone.setText("None");
        secureConnectionNone.setToolTipText("Toggles TLS and SSL connections for global SMTP settings.");
        secureConnectionNone.setMargin(new java.awt.Insets(0, 0, 0, 0));
        secureConnectionNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secureConnectionNoneActionPerformed(evt);
            }
        });

        secureConnectionTLS.setBackground(new java.awt.Color(255, 255, 255));
        secureConnectionTLS.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup6.add(secureConnectionTLS);
        secureConnectionTLS.setText("TLS");
        secureConnectionTLS.setToolTipText("Toggles TLS and SSL connections for global SMTP settings.");
        secureConnectionTLS.setMargin(new java.awt.Insets(0, 0, 0, 0));
        secureConnectionTLS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secureConnectionTLSActionPerformed(evt);
            }
        });

        secureConnectionSSL.setBackground(new java.awt.Color(255, 255, 255));
        secureConnectionSSL.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup6.add(secureConnectionSSL);
        secureConnectionSSL.setText("SSL");
        secureConnectionSSL.setToolTipText("Toggles TLS and SSL connections for global SMTP settings.");
        secureConnectionSSL.setMargin(new java.awt.Insets(0, 0, 0, 0));
        secureConnectionSSL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secureConnectionSSLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel1)
                    .addComponent(jLabel12)
                    .addComponent(usernameLabel)
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(defaultFrom, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(smtpPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                .addComponent(smtpUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(requireAuthenticationYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(requireAuthenticationNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(smtpPort, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(smtpHost, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(279, 279, 279))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(secureConnectionNone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(secureConnectionTLS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(secureConnectionSSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(271, 271, 271))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {defaultFrom, smtpHost, smtpPassword, smtpUsername});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smtpHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smtpPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(defaultFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(secureConnectionNone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secureConnectionTLS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secureConnectionSSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(requireAuthenticationYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requireAuthenticationNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smtpUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(smtpPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        serverSettings.setBackground(new java.awt.Color(255, 255, 255));
        serverSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(204, 204, 204)), "Server", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel2.setText("Clear global map on redeploy:");

        clearGlobalMapYes.setBackground(new java.awt.Color(255, 255, 255));
        clearGlobalMapYes.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup3.add(clearGlobalMapYes);
        clearGlobalMapYes.setSelected(true);
        clearGlobalMapYes.setText("Yes");
        clearGlobalMapYes.setToolTipText("Toggles clearing the global map when redeploying all channels.");
        clearGlobalMapYes.setMargin(new java.awt.Insets(0, 0, 0, 0));
        clearGlobalMapYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearGlobalMapYesActionPerformed(evt);
            }
        });

        clearGlobalMapNo.setBackground(new java.awt.Color(255, 255, 255));
        clearGlobalMapNo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup3.add(clearGlobalMapNo);
        clearGlobalMapNo.setText("No");
        clearGlobalMapNo.setToolTipText("Toggles clearing the global map when redeploying all channels.");
        clearGlobalMapNo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        clearGlobalMapNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearGlobalMapNoActionPerformed(evt);
            }
        });

        checkForUpdatesLabel.setText("Check for updates:");

        checkForUpdatesYes.setBackground(new java.awt.Color(255, 255, 255));
        checkForUpdatesYes.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup4.add(checkForUpdatesYes);
        checkForUpdatesYes.setSelected(true);
        checkForUpdatesYes.setText("Yes");
        checkForUpdatesYes.setToolTipText("Toggles checking for software updates.");
        checkForUpdatesYes.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkForUpdatesYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkForUpdatesYesActionPerformed(evt);
            }
        });

        checkForUpdatesNo.setBackground(new java.awt.Color(255, 255, 255));
        checkForUpdatesNo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup4.add(checkForUpdatesNo);
        checkForUpdatesNo.setText("No");
        checkForUpdatesNo.setToolTipText("Toggles checking for software updates.");
        checkForUpdatesNo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkForUpdatesNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkForUpdatesNoActionPerformed(evt);
            }
        });

        sendUsageStatsLabel.setText("Provide usage statistics:");

        sendUsageStatsYes.setBackground(new java.awt.Color(255, 255, 255));
        sendUsageStatsYes.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup5.add(sendUsageStatsYes);
        sendUsageStatsYes.setSelected(true);
        sendUsageStatsYes.setText("Yes");
        sendUsageStatsYes.setToolTipText("<html>Toggles sending usage statistics to Mirth.  These statistics <br>do not contain any PHI, and help Mirth determine which connectors <br>or areas of Mirth Connect are most widely used.</html>");
        sendUsageStatsYes.setMargin(new java.awt.Insets(0, 0, 0, 0));
        sendUsageStatsYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendUsageStatsYesActionPerformed(evt);
            }
        });

        sendUsageStatsNo.setBackground(new java.awt.Color(255, 255, 255));
        sendUsageStatsNo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup5.add(sendUsageStatsNo);
        sendUsageStatsNo.setText("No");
        sendUsageStatsNo.setToolTipText("<html>Toggles sending usage statistics to Mirth.  These statistics <br>do not contain any PHI, and help Mirth determine which connectors <br>or areas of Mirth Connect are most widely used.</html>");
        sendUsageStatsNo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        sendUsageStatsNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendUsageStatsNoActionPerformed(evt);
            }
        });

        updateUrl.setToolTipText("The URL to use when checking for software updates.");

        updateUrlLabel.setText("Update URL:");

        usageStatsMoreInfoLabel.setText("<html><font color=blue><u>More Info</u></font></html>");
        usageStatsMoreInfoLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usageStatsMoreInfoLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout serverSettingsLayout = new javax.swing.GroupLayout(serverSettings);
        serverSettings.setLayout(serverSettingsLayout);
        serverSettingsLayout.setHorizontalGroup(
            serverSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkForUpdatesLabel)
                    .addComponent(jLabel2)
                    .addComponent(sendUsageStatsLabel)
                    .addComponent(updateUrlLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serverSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(serverSettingsLayout.createSequentialGroup()
                        .addComponent(clearGlobalMapYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearGlobalMapNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(serverSettingsLayout.createSequentialGroup()
                        .addComponent(checkForUpdatesYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkForUpdatesNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(serverSettingsLayout.createSequentialGroup()
                        .addComponent(sendUsageStatsYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendUsageStatsNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usageStatsMoreInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(updateUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(167, Short.MAX_VALUE))
        );
        serverSettingsLayout.setVerticalGroup(
            serverSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverSettingsLayout.createSequentialGroup()
                .addGroup(serverSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(clearGlobalMapYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearGlobalMapNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serverSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkForUpdatesLabel)
                    .addComponent(checkForUpdatesYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkForUpdatesNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serverSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendUsageStatsLabel)
                    .addComponent(sendUsageStatsYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendUsageStatsNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usageStatsMoreInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serverSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateUrlLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        clientSettings.setBackground(new java.awt.Color(255, 255, 255));
        clientSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(204, 204, 204)), "Client", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel6.setText("Dashboard refresh interval (seconds):");

        jLabel7.setText("Alternate row highlighting in tables:");

        intervalTime.setToolTipText("<html>Interval in seconds at which to refresh the Dashboard. Decrement this for <br>faster updates, and increment it for slower servers with more channels.</html>");

        rowHighlightYes.setBackground(new java.awt.Color(255, 255, 255));
        rowHighlightYes.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup1.add(rowHighlightYes);
        rowHighlightYes.setSelected(true);
        rowHighlightYes.setText("Yes");
        rowHighlightYes.setToolTipText("Toggles alternate row highlighting on table rows.");
        rowHighlightYes.setMargin(new java.awt.Insets(0, 0, 0, 0));

        rowHighlightNo.setBackground(new java.awt.Color(255, 255, 255));
        rowHighlightNo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        buttonGroup1.add(rowHighlightNo);
        rowHighlightNo.setText("No");
        rowHighlightNo.setToolTipText("Toggles alternate row highlighting on table rows.");
        rowHighlightNo.setMargin(new java.awt.Insets(0, 0, 0, 0));

        messageBrowserPageSizeField.setToolTipText("Sets the default page size for browsers (message, event, etc.)");

        jLabel3.setText("Browser page size:");

        asteriskLabel.setForeground(new java.awt.Color(255, 0, 0));
        asteriskLabel.setText("*");

        asteriskLabel1.setForeground(new java.awt.Color(255, 0, 0));
        asteriskLabel1.setText("*");

        javax.swing.GroupLayout clientSettingsLayout = new javax.swing.GroupLayout(clientSettings);
        clientSettings.setLayout(clientSettingsLayout);
        clientSettingsLayout.setHorizontalGroup(
            clientSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientSettingsLayout.createSequentialGroup()
                        .addComponent(messageBrowserPageSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(asteriskLabel1))
                    .addGroup(clientSettingsLayout.createSequentialGroup()
                        .addComponent(rowHighlightYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rowHighlightNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(clientSettingsLayout.createSequentialGroup()
                        .addComponent(intervalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(asteriskLabel)))
                .addContainerGap(239, Short.MAX_VALUE))
        );
        clientSettingsLayout.setVerticalGroup(
            clientSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientSettingsLayout.createSequentialGroup()
                .addGroup(clientSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(intervalTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(asteriskLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rowHighlightYes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowHighlightNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(clientSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageBrowserPageSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(asteriskLabel1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(serverSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clientSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void restoreButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_restoreButtonActionPerformed
    {//GEN-HEADEREND:event_restoreButtonActionPerformed
        if (parent.settingsTasks.getContentPane().getComponent(1).isVisible()) {
            if (!parent.alertOkCancel(this, "Your new settings will first be saved.  Continue?")) {
                return;
            }
            saveSettings();
        }

        File backupFile = parent.importFile("XML");

        if (backupFile != null) {
            String backupXML = null;
            try {
                backupXML = FileUtil.read(backupFile);
            } catch (IOException ex) {
                parent.alertError(this, "File could not be read.");
                return;
            }
            try {
                ServerConfiguration configuration = ImportConverter.convertServerConfiguration(backupXML);

                if (parent.alertOption(this, "Import configuration from " + configuration.getDate() + "?\nWARNING: This will overwrite all current channels, alerts, and server properties.")) {
                    try {
                        parent.mirthClient.setServerConfiguration(configuration);
                        parent.clearChannelCache();
                        loadSettings();
                        parent.alertInformation(this, "Your configuration was successfully restored.");
                    } catch (ClientException e) {
                        parent.alertException(this, e.getStackTrace(), e.getMessage());
                    }
                }
            } catch (Exception e) {
                parent.alertError(this, "Invalid server configuration file.");
            }
        }
    }//GEN-LAST:event_restoreButtonActionPerformed

    private void backupButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backupButtonActionPerformed
    {//GEN-HEADEREND:event_backupButtonActionPerformed
        if (parent.settingsTasks.getContentPane().getComponent(1).isVisible()) {
            int option = JOptionPane.showConfirmDialog(this, "Would you like to save the settings first?");

            if (option == JOptionPane.YES_OPTION) {
                saveSettings();
            } else if (option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION) {
                return;
            }
        }

        String backupDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

        ObjectXMLSerializer serializer = new ObjectXMLSerializer();
        ServerConfiguration configuration = null;
        try {
            configuration = parent.mirthClient.getServerConfiguration();
        } catch (ClientException e) {
            parent.alertException(this, e.getStackTrace(), e.getMessage());
            return;
        }

        configuration.setDate(backupDate);
        String backupXML = serializer.toXML(configuration);

        boolean fileWritten = parent.exportFile(backupXML, backupDate.substring(0, 10) + " Mirth Backup.xml", "XML", "Server Configuration");
        if (fileWritten) {
            userPreferences.put("lastBackup", backupDate);
            lastBackup.setText(backupDate);
        }
    }//GEN-LAST:event_backupButtonActionPerformed

    private void clearGlobalMapNoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearGlobalMapNoActionPerformed
    {//GEN-HEADEREND:event_clearGlobalMapNoActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_clearGlobalMapNoActionPerformed

    private void clearGlobalMapYesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearGlobalMapYesActionPerformed
    {//GEN-HEADEREND:event_clearGlobalMapYesActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_clearGlobalMapYesActionPerformed

private void checkForUpdatesYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkForUpdatesYesActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_checkForUpdatesYesActionPerformed

private void checkForUpdatesNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkForUpdatesNoActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_checkForUpdatesNoActionPerformed

private void sendUsageStatsYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendUsageStatsYesActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_sendUsageStatsYesActionPerformed

private void sendUsageStatsNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendUsageStatsNoActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_sendUsageStatsNoActionPerformed

private void usageStatsMoreInfoLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usageStatsMoreInfoLabelMouseClicked
    BareBonesBrowserLaunch.openURL(UIConstants.PRIVACY_URL);
}//GEN-LAST:event_usageStatsMoreInfoLabelMouseClicked

private void secureConnectionNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secureConnectionNoneActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_secureConnectionNoneActionPerformed

private void secureConnectionTLSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secureConnectionTLSActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_secureConnectionTLSActionPerformed

private void secureConnectionSSLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secureConnectionSSLActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_secureConnectionSSLActionPerformed

    private void requireAuthenticationNoActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_requireAuthenticationNoActionPerformed
    {// GEN-HEADEREND:event_requireAuthenticationNoActionPerformed
        smtpUsername.setEnabled(false);
        smtpPassword.setEnabled(false);
        usernameLabel.setEnabled(false);
        passwordLabel.setEnabled(false);
    }// GEN-LAST:event_requireAuthenticationNoActionPerformed

    private void requireAuthenticationYesActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_requireAuthenticationYesActionPerformed
    {// GEN-HEADEREND:event_requireAuthenticationYesActionPerformed
        smtpUsername.setEnabled(true);
        smtpPassword.setEnabled(true);
        usernameLabel.setEnabled(true);
        passwordLabel.setEnabled(true);
    }// GEN-LAST:event_requireAuthenticationYesActionPerformed

    /** Loads the current settings into the Settings form */
    public void loadSettings() {
        intervalTime.setDocument(new MirthFieldConstraints(3, false, false, true));
        messageBrowserPageSizeField.setDocument(new MirthFieldConstraints(3, false, false, true));
        userPreferences = Preferences.userNodeForPackage(Mirth.class);
        int interval = userPreferences.getInt("intervalTime", 10);
        intervalTime.setText(interval + "");

        int messageBrowserPageSize = userPreferences.getInt("messageBrowserPageSize", 20);
        messageBrowserPageSizeField.setText(messageBrowserPageSize + "");

        if (userPreferences.getBoolean("highlightRows", true)) {
            rowHighlightYes.setSelected(true);
        } else {
            rowHighlightNo.setSelected(true);
        }
        try {
            serverProperties = parent.mirthClient.getServerProperties();

            if (serverProperties.getProperty("smtp.host") != null) {
                smtpHost.setText(serverProperties.getProperty("smtp.host"));
            } else {
                smtpHost.setText("");
            }

            if (serverProperties.getProperty("smtp.port") != null) {
                smtpPort.setText(serverProperties.getProperty("smtp.port"));
            } else {
                smtpPort.setText("");
            }

            if (serverProperties.getProperty("smtp.from") != null) {
                defaultFrom.setText(serverProperties.getProperty("smtp.from"));
            } else {
                defaultFrom.setText("");
            }

            String smtpSecure = serverProperties.getProperty("smtp.secure");
            if (smtpSecure != null && smtpSecure.equalsIgnoreCase("tls")) {
                secureConnectionTLS.setSelected(true);
            } else if (smtpSecure != null && smtpSecure.equalsIgnoreCase("ssl")) {
                secureConnectionSSL.setSelected(true);
            } else {
                secureConnectionNone.setSelected(true);
            }

            if (serverProperties.getProperty("smtp.auth") != null) {
                if (serverProperties.getProperty("smtp.auth").equals(UIConstants.YES_OPTION)) {
                    requireAuthenticationYes.setSelected(true);
                    requireAuthenticationYesActionPerformed(null);
                } else {
                    requireAuthenticationNo.setSelected(true);
                    requireAuthenticationNoActionPerformed(null);
                }
            } else {
                requireAuthenticationNo.setSelected(true);
                requireAuthenticationNoActionPerformed(null);
            }

            if (serverProperties.getProperty("server.resetglobalvariables") != null) {
                if (serverProperties.getProperty("server.resetglobalvariables").equals(UIConstants.YES_OPTION)) {
                    clearGlobalMapYes.setSelected(true);
                } else {
                    clearGlobalMapNo.setSelected(true);
                }
            } else {
                clearGlobalMapYes.setSelected(true);
            }

            if (serverProperties.getProperty("update.enabled") != null) {
                if (serverProperties.getProperty("update.enabled").equals(UIConstants.YES_OPTION)) {
                    checkForUpdatesYes.setSelected(true);
                } else {
                    checkForUpdatesNo.setSelected(true);
                }
            } else {
                checkForUpdatesYes.setSelected(true);
            }

            if (serverProperties.getProperty("stats.enabled") != null) {
                if (serverProperties.getProperty("stats.enabled").equals(UIConstants.YES_OPTION)) {
                    sendUsageStatsYes.setSelected(true);
                } else {
                    sendUsageStatsNo.setSelected(true);
                }
            } else {
                sendUsageStatsYes.setSelected(true);
            }

            if (serverProperties.getProperty("update.url") != null) {
                updateUrl.setText(serverProperties.getProperty("update.url"));
            } else {
                updateUrl.setText("");
            }

            if (serverProperties.getProperty("smtp.username") != null) {
                smtpUsername.setText(serverProperties.getProperty("smtp.username"));
            } else {
                smtpUsername.setText("");
            }

            if (serverProperties.getProperty("smtp.password") != null) {
                smtpPassword.setText(serverProperties.getProperty("smtp.password"));
            } else {
                smtpPassword.setText("");
            }

            lastBackup.setText(userPreferences.get("lastBackup", "None"));
        } catch (ClientException e) {
            parent.alertException(this, e.getStackTrace(), e.getMessage());
        }
    }

    /** Saves the current settings from the settings form */
    public void saveSettings() {
        if (intervalTime.getText().length() == 0) {
            parent.alertWarning(this, "Please enter a valid interval time.");
            return;
        }
        if (messageBrowserPageSizeField.getText().length() == 0) {
            parent.alertWarning(this, "Please enter a valid message browser page size.");
            return;
        }

        int interval = Integer.parseInt(intervalTime.getText());
        int messageBrowserPageSize = Integer.parseInt(messageBrowserPageSizeField.getText());

        if (interval <= 0) {
            parent.alertWarning(this, "Please enter an interval time that is larger than 0.");
        } else if (messageBrowserPageSize <= 0) {
            parent.alertWarning(this, "Please enter an message browser page size larger than 0.");
        } else {
            userPreferences.putInt("intervalTime", interval);
            userPreferences.putInt("messageBrowserPageSize", messageBrowserPageSize);
            userPreferences.putBoolean("highlightRows", rowHighlightYes.isSelected());

            if (clearGlobalMapNo.isSelected()) {
                serverProperties.put("server.resetglobalvariables", UIConstants.NO_OPTION);
            } else {
                serverProperties.put("server.resetglobalvariables", UIConstants.YES_OPTION);
            }

            if (checkForUpdatesNo.isSelected()) {
                serverProperties.put("update.enabled", UIConstants.NO_OPTION);
            } else {
                serverProperties.put("update.enabled", UIConstants.YES_OPTION);
            }

            if (sendUsageStatsNo.isSelected()) {
                serverProperties.put("stats.enabled", UIConstants.NO_OPTION);
            } else {
                serverProperties.put("stats.enabled", UIConstants.YES_OPTION);
            }

            serverProperties.put("update.url", updateUrl.getText());

            serverProperties.put("smtp.host", smtpHost.getText());
            serverProperties.put("smtp.port", smtpPort.getText());
            serverProperties.put("smtp.from", defaultFrom.getText());

            if (secureConnectionTLS.isSelected()) {
                serverProperties.put("smtp.secure", "tls");
            } else if (secureConnectionSSL.isSelected()) {
                serverProperties.put("smtp.secure", "ssl");
            } else {
                serverProperties.put("smtp.secure", "none");
            }

            if (requireAuthenticationYes.isSelected()) {
                serverProperties.put("smtp.auth", UIConstants.YES_OPTION);
                serverProperties.put("smtp.username", smtpUsername.getText());
                serverProperties.put("smtp.password", new String(smtpPassword.getPassword()));
            } else {
                serverProperties.put("smtp.auth", UIConstants.NO_OPTION);
                serverProperties.put("smtp.username", "");
                serverProperties.put("smtp.password", "");
            }

            try {
                parent.mirthClient.setServerProperties(serverProperties);
            } catch (ClientException e) {
                parent.alertException(this, e.getStackTrace(), e.getMessage());
            }
            parent.settingsTasks.getContentPane().getComponent(1).setVisible(false);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel asteriskLabel;
    private javax.swing.JLabel asteriskLabel1;
    private javax.swing.JButton backupButton;
    private javax.swing.JPanel backupPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JLabel checkForUpdatesLabel;
    private com.webreach.mirth.client.ui.components.MirthRadioButton checkForUpdatesNo;
    private com.webreach.mirth.client.ui.components.MirthRadioButton checkForUpdatesYes;
    private com.webreach.mirth.client.ui.components.MirthRadioButton clearGlobalMapNo;
    private com.webreach.mirth.client.ui.components.MirthRadioButton clearGlobalMapYes;
    private javax.swing.JPanel clientSettings;
    private com.webreach.mirth.client.ui.components.MirthTextField defaultFrom;
    private com.webreach.mirth.client.ui.components.MirthTextField intervalTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lastBackup;
    private com.webreach.mirth.client.ui.components.MirthTextField messageBrowserPageSizeField;
    private javax.swing.JLabel passwordLabel;
    private com.webreach.mirth.client.ui.components.MirthRadioButton requireAuthenticationNo;
    private com.webreach.mirth.client.ui.components.MirthRadioButton requireAuthenticationYes;
    private javax.swing.JButton restoreButton;
    private com.webreach.mirth.client.ui.components.MirthRadioButton rowHighlightNo;
    private com.webreach.mirth.client.ui.components.MirthRadioButton rowHighlightYes;
    private com.webreach.mirth.client.ui.components.MirthRadioButton secureConnectionNone;
    private com.webreach.mirth.client.ui.components.MirthRadioButton secureConnectionSSL;
    private com.webreach.mirth.client.ui.components.MirthRadioButton secureConnectionTLS;
    private javax.swing.JLabel sendUsageStatsLabel;
    private com.webreach.mirth.client.ui.components.MirthRadioButton sendUsageStatsNo;
    private com.webreach.mirth.client.ui.components.MirthRadioButton sendUsageStatsYes;
    private javax.swing.JPanel serverSettings;
    private com.webreach.mirth.client.ui.components.MirthTextField smtpHost;
    private com.webreach.mirth.client.ui.components.MirthPasswordField smtpPassword;
    private com.webreach.mirth.client.ui.components.MirthTextField smtpPort;
    private com.webreach.mirth.client.ui.components.MirthTextField smtpUsername;
    private com.webreach.mirth.client.ui.components.MirthTextField updateUrl;
    private javax.swing.JLabel updateUrlLabel;
    private javax.swing.JLabel usageStatsMoreInfoLabel;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
