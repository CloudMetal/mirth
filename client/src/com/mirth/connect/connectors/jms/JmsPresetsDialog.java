/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mirth.connect.connectors.jms;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.log4j.Logger;

import com.mirth.connect.client.core.ClientException;
import com.mirth.connect.client.ui.Frame;

public class JmsPresetsDialog extends javax.swing.JDialog {
    private Frame parent;
    private DefaultTableModel model;
    private String connectorName;
    private JmsConnectorPanel connectorPanel;
    private Logger logger = Logger.getLogger(getClass());

    public JmsPresetsDialog(java.awt.Frame frame, boolean modal, Frame parent, JmsConnectorPanel connectorPanel) {
        super(frame, modal);
        this.parent = parent;
        this.connectorPanel = connectorPanel;

        setTitle("Manage Presets");

        initComponents();
        
        model = (DefaultTableModel) presetTable.getModel();
        
        // these two lines hide the table header
        presetTable.setTableHeader(null);
        presetScrollTable.setColumnHeaderView(null);    
    }

    public void init(String connectorName, Set<String> presets) {
        this.connectorName = connectorName;

        for (int row = model.getRowCount() - 1; row >= 0; row--) {
            model.removeRow(row);
        }

        for (String presetName : presets) {
            model.addRow(new String[] { presetName });
        }
    }

    public void addPreset(String presetName) {
        model.addRow(new String[] { presetName });
    }

    // @formatter:off
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new com.mirth.connect.client.ui.components.MirthButton();
        deleteButton = new com.mirth.connect.client.ui.components.MirthButton();
        presetScrollTable = new javax.swing.JScrollPane();
        presetTable = new com.mirth.connect.client.ui.components.MirthTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        presetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Preset"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        presetTable.setColumnSelectionAllowed(true);
        presetTable.getTableHeader().setReorderingAllowed(false);
        presetScrollTable.setViewportView(presetTable);
        presetTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(presetScrollTable))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(presetScrollTable, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        Set<String> deletePresets = new HashSet<String>();
        int[] selectedRows = presetTable.getSelectedModelRows();
        
        for (int row : selectedRows) {
            deletePresets.add(model.getValueAt(row, 0).toString());
        }
        
        try {
            parent.mirthClient.invokeConnectorService(connectorName, "deletePresets", deletePresets);
            
            // remove the rows in order from greatest to least since deleting a row re-indexes the subsequent rows
            Arrays.sort(selectedRows);
            ArrayUtils.reverse(selectedRows);
            
            for (int row : selectedRows) {
                model.removeRow(row);
            }
            
            for (String presetName : deletePresets) {
                connectorPanel.removePreset(presetName);
            }
        } catch (ClientException e) {
            String errorMessage = "An error occurred when attempting to delete the selected preset(s)";
            parent.alertException(this, e.getStackTrace(), errorMessage);
            logger.error(errorMessage, e);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mirth.connect.client.ui.components.MirthButton closeButton;
    private com.mirth.connect.client.ui.components.MirthButton deleteButton;
    private javax.swing.JScrollPane presetScrollTable;
    private com.mirth.connect.client.ui.components.MirthTable presetTable;
    // End of variables declaration//GEN-END:variables
    // @formatter:on
}
