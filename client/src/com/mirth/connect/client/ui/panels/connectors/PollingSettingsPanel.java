/*
 * Copyright (c) Mirth Corporation. All rights reserved.
 * http://www.mirthcorp.com
 * 
 * The software in this package is published under the terms of the MPL
 * license a copy of which has been included with this distribution in
 * the LICENSE.txt file.
 */

package com.mirth.connect.client.ui.panels.connectors;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import javax.swing.text.DateFormatter;

import org.apache.commons.lang.math.NumberUtils;

import com.mirth.connect.client.ui.UIConstants;
import com.mirth.connect.client.ui.components.MirthFieldConstraints;
import com.mirth.connect.donkey.model.channel.PollConnectorProperties;

public class PollingSettingsPanel extends javax.swing.JPanel {

    public PollingSettingsPanel() {
        initComponents();

        pollingFrequencyField.setDocument(new MirthFieldConstraints(0, false, false, true));
    }

    public void setProperties(PollConnectorProperties properties) {
        if (properties.getPollingType().equals(PollConnectorProperties.POLLING_TYPE_INTERVAL)) {
            pollingIntervalButton.setSelected(true);
            pollingIntervalButtonActionPerformed(null);
            pollingFrequencyField.setText(String.valueOf(properties.getPollingFrequency()));
        } else {
            pollingTimeButton.setSelected(true);
            pollingTimeButtonActionPerformed(null);

            SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm aa");
            Calendar timeCalendar = Calendar.getInstance();
            timeCalendar.set(Calendar.HOUR_OF_DAY, properties.getPollingHour());
            timeCalendar.set(Calendar.MINUTE, properties.getPollingMinute());
            pollingTimePicker.setDate(dateFormat.format(timeCalendar.getTime()));
        }
    }

    public void fillProperties(PollConnectorProperties properties) {
        // TODO: Polling properties - extract and fix defaults
        if (pollingIntervalButton.isSelected()) {
            properties.setPollingType(PollConnectorProperties.POLLING_TYPE_INTERVAL);
            properties.setPollingFrequency(NumberUtils.toInt(pollingFrequencyField.getText(), -1));
        } else {
            properties.setPollingType(PollConnectorProperties.POLLING_TYPE_TIME);


            try {
                SimpleDateFormat timeDateFormat = new SimpleDateFormat("hh:mm aa");
                DateFormatter timeFormatter = new DateFormatter(timeDateFormat);
                Date timeDate = (Date) timeFormatter.stringToValue(pollingTimePicker.getDate());
                Calendar timeCalendar = Calendar.getInstance();
                timeCalendar.setTime(timeDate);

                properties.setPollingHour(timeCalendar.get(Calendar.HOUR_OF_DAY));
                properties.setPollingMinute(timeCalendar.get(Calendar.MINUTE));
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }
    }

    public boolean checkProperties(PollConnectorProperties properties, boolean highlight) {
        boolean valid = true;

        // TODO: Polling properties checks don't work properly with ints
        if (properties.getPollingType().equals(PollConnectorProperties.POLLING_TYPE_INTERVAL) && properties.getPollingFrequency() <= 0) {
            valid = false;
            if (highlight) {
                pollingFrequencyField.setBackground(UIConstants.INVALID_COLOR);
            }
        }

        if (properties.getPollingType().equals(PollConnectorProperties.POLLING_TYPE_TIME) && (properties.getPollingHour() < 0 || properties.getPollingMinute() < 0)) {
            valid = false;
            if (highlight) {
                pollingFrequencyField.setBackground(UIConstants.INVALID_COLOR);
            }
        }

        return valid;
    }

    public void resetInvalidProperties() {
        pollingFrequencyField.setBackground(null);
        pollingTimePicker.setBackground(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pollingButtonGroup = new javax.swing.ButtonGroup();
        pollingTypeLabel = new javax.swing.JLabel();
        pollingIntervalButton = new com.mirth.connect.client.ui.components.MirthRadioButton();
        pollingTimeButton = new com.mirth.connect.client.ui.components.MirthRadioButton();
        pollingFrequencyField = new com.mirth.connect.client.ui.components.MirthTextField();
        pollingFrequencyLabel = new javax.swing.JLabel();
        pollingTimeLabel = new javax.swing.JLabel();
        pollingTimePicker = new com.mirth.connect.client.ui.components.MirthTimePicker();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(204, 204, 204)), "Polling Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        pollingTypeLabel.setText("Polling Type:");

        pollingIntervalButton.setBackground(new java.awt.Color(255, 255, 255));
        pollingIntervalButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pollingButtonGroup.add(pollingIntervalButton);
        pollingIntervalButton.setText("Interval");
        pollingIntervalButton.setToolTipText("<html>A JavaScript reader polls to determine when new messages have arrived.<br>It can be configured when to poll in one of two different ways.<br>If \"Interval\" is selected, the connector will poll every n milliseconds, where n is specified in the Polling Frequency control.<br>If \"Time\" is selected, the connector will poll once a day at the time specified in the Polling Time control.</html>");
        pollingIntervalButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pollingIntervalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pollingIntervalButtonActionPerformed(evt);
            }
        });

        pollingTimeButton.setBackground(new java.awt.Color(255, 255, 255));
        pollingTimeButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pollingButtonGroup.add(pollingTimeButton);
        pollingTimeButton.setText("Time");
        pollingTimeButton.setToolTipText("<html>A JavaScript reader polls to determine when new messages have arrived.<br>It can be configured when to poll in one of two different ways.<br>If \"Interval\" is selected, the connector will poll every n milliseconds, where n is specified in the Polling Frequency control.<br>If \"Time\" is selected, the connector will poll once a day at the time specified in the Polling Time control.</html>");
        pollingTimeButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pollingTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pollingTimeButtonActionPerformed(evt);
            }
        });

        pollingFrequencyField.setToolTipText("<html>If the \"Interval\" Polling Type is selected, the number of milliseconds between polls must be entered here.<br>Avoid extremely small values because polling can be a somewhat time-consuming operation.</html>");

        pollingFrequencyLabel.setText("Polling Frequency (ms):");

        pollingTimeLabel.setText("Polling Time (daily):");

        pollingTimePicker.setToolTipText("If the \"Time\" Polling Type is selected, the time of day to poll must be entered here.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pollingTimeLabel)
                    .addComponent(pollingFrequencyLabel)
                    .addComponent(pollingTypeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pollingIntervalButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pollingTimeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pollingFrequencyField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pollingTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pollingTypeLabel)
                    .addComponent(pollingIntervalButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pollingTimeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pollingFrequencyLabel)
                    .addComponent(pollingFrequencyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pollingTimeLabel)
                    .addComponent(pollingTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pollingIntervalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pollingIntervalButtonActionPerformed
        pollingFrequencyLabel.setEnabled(true);
        pollingTimeLabel.setEnabled(false);
        pollingFrequencyField.setEnabled(true);
        pollingTimePicker.setEnabled(false);
    }//GEN-LAST:event_pollingIntervalButtonActionPerformed

    private void pollingTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pollingTimeButtonActionPerformed
        pollingFrequencyLabel.setEnabled(false);
        pollingTimeLabel.setEnabled(true);
        pollingFrequencyField.setEnabled(false);
        pollingTimePicker.setEnabled(true);
    }//GEN-LAST:event_pollingTimeButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup pollingButtonGroup;
    private com.mirth.connect.client.ui.components.MirthTextField pollingFrequencyField;
    private javax.swing.JLabel pollingFrequencyLabel;
    private com.mirth.connect.client.ui.components.MirthRadioButton pollingIntervalButton;
    private com.mirth.connect.client.ui.components.MirthRadioButton pollingTimeButton;
    private javax.swing.JLabel pollingTimeLabel;
    private com.mirth.connect.client.ui.components.MirthTimePicker pollingTimePicker;
    private javax.swing.JLabel pollingTypeLabel;
    // End of variables declaration//GEN-END:variables
}
