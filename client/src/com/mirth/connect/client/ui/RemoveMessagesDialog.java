package com.mirth.connect.client.ui;

import java.util.HashSet;
import java.util.Set;

import javax.swing.JDialog;
import javax.swing.SwingWorker;

import com.mirth.connect.client.core.ClientException;
import com.mirth.connect.donkey.model.channel.ChannelState;
import com.mirth.connect.model.DashboardStatus;

public class RemoveMessagesDialog extends javax.swing.JDialog {
    private Frame parent;
    private Set<String> channelIds;

    public RemoveMessagesDialog(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.parent = parent;
    }

    public void init(Set<DashboardStatus> selectedChannelStatuses) {
        clearStatsCheckBox.setSelected(false);
        includeRunningChannels.setSelected(false);
        channelIds = new HashSet<String>();
        boolean restartCheckboxEnabled = false;

        for (final DashboardStatus channelStatus : selectedChannelStatuses) {
            channelIds.add(channelStatus.getChannelId());

            if (!channelStatus.getState().equals(ChannelState.STOPPED) && !restartCheckboxEnabled) {
                restartCheckboxEnabled = true;
            }
        }

        includeRunningChannels.setEnabled(restartCheckboxEnabled);
    }

    // @formatter:off
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageLabel = new javax.swing.JLabel();
        clearStatsCheckBox = new com.mirth.connect.client.ui.components.MirthCheckBox();
        okButton = new com.mirth.connect.client.ui.components.MirthButton();
        cancelButton = new com.mirth.connect.client.ui.components.MirthButton();
        includeRunningChannels = new com.mirth.connect.client.ui.components.MirthCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Remove All Messages");
        setResizable(false);

        messageLabel.setText("Are you sure you want to remove all messages for the selected channel(s)?");

        clearStatsCheckBox.setText("Also clear statistics");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        includeRunningChannels.setText("Restart running channels (otherwise they must be skipped)");
        includeRunningChannels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeRunningChannelsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearStatsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(includeRunningChannels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(messageLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clearStatsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(includeRunningChannels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        final String workingId = parent.startWorking("Removing messages...");
        final JDialog dialog = this;
        
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            public Void doInBackground() {
                try {
                    parent.mirthClient.clearMessages(channelIds, includeRunningChannels.isSelected(), clearStatsCheckBox.isSelected());
                } catch (ClientException e) {
                    parent.alertException(PlatformUI.MIRTH_FRAME, e.getStackTrace(), e.getMessage());
                }
                
                return null;
            }
            
            public void done() {
                parent.doRefreshStatuses(true);
                
                if (parent.currentContentPage == parent.messageBrowser) {
                    parent.messageBrowser.refresh(1);
                }
                
                parent.stopWorking(workingId);
                dialog.setVisible(false);
            }
        };
        
        worker.execute();
    }//GEN-LAST:event_okButtonActionPerformed

    private void includeRunningChannelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeRunningChannelsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_includeRunningChannelsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mirth.connect.client.ui.components.MirthButton cancelButton;
    private com.mirth.connect.client.ui.components.MirthCheckBox clearStatsCheckBox;
    private com.mirth.connect.client.ui.components.MirthCheckBox includeRunningChannels;
    private javax.swing.JLabel messageLabel;
    private com.mirth.connect.client.ui.components.MirthButton okButton;
    // End of variables declaration//GEN-END:variables
    // @formatter:on
}
