/*
 * Copyright (c) Mirth Corporation. All rights reserved.
 * http://www.mirthcorp.com
 * 
 * The software in this package is published under the terms of the MPL
 * license a copy of which has been included with this distribution in
 * the LICENSE.txt file.
 */

package com.mirth.connect.client.ui.browsers.message;

import java.io.File;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;

import com.mirth.connect.client.core.ClientException;
import com.mirth.connect.client.ui.Frame;
import com.mirth.connect.client.ui.UIConstants;
import com.mirth.connect.donkey.model.message.ContentType;
import com.mirth.connect.model.filters.MessageFilter;
import com.mirth.connect.util.export.MessageExportOptions;

/**
 *
 * @author brentm
 */
public class MessageBrowserExportResults extends javax.swing.JDialog {
    private Frame parent;
    private String channelId;
    private MessageFilter messageFilter;
    private int pageSize;
    
    /**
     * Creates new form MessageBrowserExportResults
     */
    public MessageBrowserExportResults(Frame parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        initComponentsCustom();
        reset();
    }
    
    private void initComponentsCustom() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("XML serialized message");
        model.addElement(new ExportFormat(false, ContentType.RAW));
        model.addElement(new ExportFormat(false, ContentType.PROCESSED_RAW));
        model.addElement(new ExportFormat(false, ContentType.TRANSFORMED));
        model.addElement(new ExportFormat(false, ContentType.ENCODED));
        model.addElement(new ExportFormat(false, ContentType.RESPONSE));
        model.addElement(new ExportFormat(true, ContentType.TRANSFORMED));
        model.addElement(new ExportFormat(true, ContentType.ENCODED));
        model.addElement(new ExportFormat(true, ContentType.RESPONSE));
        model.addElement(new ExportFormat(true, ContentType.RESPONSE_TRANSFORMED));
        model.addElement(new ExportFormat(true, ContentType.PROCESSED_RESPONSE));
        
        formatComboBox.setModel(model);
    }
    
    private class ExportFormat {
        private boolean destination = false;
        private ContentType contentType;

        public ExportFormat(boolean destination, ContentType contentType) {
            this.destination = destination;
            this.contentType = contentType;
        }
        
        public boolean isDestination() {
            return destination;
        }

        public ContentType getContentType() {
            return contentType;
        }
        
        public String toString() {
            if (contentType != null) {
                return (destination ? "Destination" : "Source") + " - " + contentType.toString();
            }
            
            return "";
        }
    }
    
    public void loadChannel(String channelId) {
        this.channelId = channelId;
    }
    
    public void setMessageFilter(MessageFilter messageFilter) {
        this.messageFilter = messageFilter;
    }
    
    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formatButtonGroup = new javax.swing.ButtonGroup();
        destinationButtonGroup = new javax.swing.ButtonGroup();
        containerPanel = new javax.swing.JPanel();
        formatPanel = new javax.swing.JPanel();
        formatComboBox = new com.mirth.connect.client.ui.components.MirthComboBox();
        formatFileMultiple = new javax.swing.JRadioButton();
        formatFileSingle = new javax.swing.JRadioButton();
        compressCheckbox = new com.mirth.connect.client.ui.components.MirthCheckBox();
        destinationPanel = new javax.swing.JPanel();
        exportTypeLocal = new javax.swing.JRadioButton();
        exportTypeServer = new javax.swing.JRadioButton();
        exportTypeLocalText = new javax.swing.JTextField();
        exportTypeServerText = new javax.swing.JTextField();
        exportTypeLocalBrowse = new com.mirth.connect.client.ui.components.MirthButton();
        buttonExport = new com.mirth.connect.client.ui.components.MirthButton();
        buttonCancel = new com.mirth.connect.client.ui.components.MirthButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export Messages");
        setBackground(java.awt.Color.white);
        setLocation(new java.awt.Point(300, 150));
        setResizable(false);

        containerPanel.setBackground(new java.awt.Color(255, 255, 255));

        formatPanel.setBackground(new java.awt.Color(255, 255, 255));
        formatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Format"));

        formatFileMultiple.setBackground(new java.awt.Color(255, 255, 255));
        formatButtonGroup.add(formatFileMultiple);
        formatFileMultiple.setSelected(true);
        formatFileMultiple.setText("Multiple Files");

        formatFileSingle.setBackground(new java.awt.Color(255, 255, 255));
        formatButtonGroup.add(formatFileSingle);
        formatFileSingle.setText("One File");
        formatFileSingle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatFileSingleActionPerformed(evt);
            }
        });

        compressCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        compressCheckbox.setText("Compress to .zip");
        compressCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compressCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout formatPanelLayout = new javax.swing.GroupLayout(formatPanel);
        formatPanel.setLayout(formatPanelLayout);
        formatPanelLayout.setHorizontalGroup(
            formatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(formatFileMultiple)
                .addGap(18, 18, 18)
                .addComponent(formatFileSingle)
                .addGap(18, 18, 18)
                .addComponent(compressCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        formatPanelLayout.setVerticalGroup(
            formatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formatPanelLayout.createSequentialGroup()
                .addGroup(formatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formatFileMultiple)
                    .addComponent(formatFileSingle)
                    .addComponent(compressCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        destinationPanel.setBackground(new java.awt.Color(255, 255, 255));
        destinationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Destination"));

        exportTypeLocal.setBackground(new java.awt.Color(255, 255, 255));
        destinationButtonGroup.add(exportTypeLocal);
        exportTypeLocal.setSelected(true);
        exportTypeLocal.setText("Export to my computer");
        exportTypeLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTypeLocalActionPerformed(evt);
            }
        });

        exportTypeServer.setBackground(new java.awt.Color(255, 255, 255));
        destinationButtonGroup.add(exportTypeServer);
        exportTypeServer.setText("Export to folder on Mirth Connect Server");
        exportTypeServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTypeServerActionPerformed(evt);
            }
        });

        exportTypeLocalText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                exportTypeLocalTextFocusGained(evt);
            }
        });

        exportTypeServerText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                exportTypeServerTextFocusGained(evt);
            }
        });

        exportTypeLocalBrowse.setText("Browse...");
        exportTypeLocalBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTypeLocalBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout destinationPanelLayout = new javax.swing.GroupLayout(destinationPanel);
        destinationPanel.setLayout(destinationPanelLayout);
        destinationPanelLayout.setHorizontalGroup(
            destinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(destinationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(destinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(destinationPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(destinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exportTypeLocalText)
                            .addComponent(exportTypeServerText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportTypeLocalBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(destinationPanelLayout.createSequentialGroup()
                        .addGroup(destinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exportTypeLocal)
                            .addComponent(exportTypeServer))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        destinationPanelLayout.setVerticalGroup(
            destinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(destinationPanelLayout.createSequentialGroup()
                .addComponent(exportTypeLocal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(destinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportTypeLocalText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportTypeLocalBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exportTypeServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportTypeServerText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        buttonExport.setText("Export");
        buttonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout containerPanelLayout = new javax.swing.GroupLayout(containerPanel);
        containerPanel.setLayout(containerPanelLayout);
        containerPanelLayout.setHorizontalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(destinationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonExport, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        containerPanelLayout.setVerticalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destinationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonExport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(containerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportActionPerformed
        MessageExportOptions options = new MessageExportOptions();
        options.setChannelId(channelId);
        options.setMessageFilter(messageFilter);
        options.setBufferSize(pageSize);
        options.setSingleFile(formatFileSingle.isSelected());
        options.setCompress(compressCheckbox.isSelected());
        options.setEncrypt(parent.mirthClient.isEncryptExport());
        options.setCharset(UIConstants.CHARSET);
        
        if (formatComboBox.getSelectedItem() instanceof ExportFormat) {
            ExportFormat exportFormat = (ExportFormat) formatComboBox.getSelectedItem();
            options.setContentType(exportFormat.getContentType());
            options.setDestinationContent(exportFormat.isDestination());
        }
        
        try {
            int exportCount = 0;
            
            if (exportTypeLocal.isSelected()) {
                String folderText = exportTypeLocalText.getText();
                
                if (folderText.isEmpty()) {
                    parent.alertError(parent, "Please specify a destination folder");
                    return;
                } else {
                    options.setFolder(folderText);
                }
                
                exportCount = parent.mirthClient.exportMessagesLocal(options);
            } else {
                String folder = exportTypeServerText.getText();
                
                if (folder.isEmpty()) {
                    parent.alertError(parent, "Please specify a destination folder");
                    return;
                }
                
                options.setFolder(folder);
                
                exportCount = parent.mirthClient.exportMessagesServer(options);
            }
            
            setVisible(false);
            parent.alertInformation(parent, exportCount + " message" + ((exportCount == 1) ? " has" : "s have") + " been successfully exported to: " + options.getFolder());
            reset();
        } catch (ClientException e) {
            // TODO: find a way to detect user-related errors so that we can show a simple error message instead of the exception message and stack trace
//            MessageExporterUserError userError = (MessageExporterUserError) findCause(e, MessageExporterUserError.class);
            
//            if (userError != null) {
//                parent.alertError(parent, userError.getMessage());
//            } else {            
                Throwable cause = (e.getCause() == null) ? e : e.getCause();
                parent.alertException(parent, cause.getStackTrace(), cause.getMessage());
//            }
        }
    }//GEN-LAST:event_buttonExportActionPerformed

//    private Throwable findCause(Throwable e, Class searchClass) {
//        Throwable cause = e.getCause();
//        
//        if (cause != null) {
//            return searchClass.isInstance(cause) ? cause : findCause(cause, searchClass);
//        }
//        
//        return null;
//    }
    
    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        setVisible(false);
        reset();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void exportTypeLocalBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTypeLocalBrowseActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        File currentDir = new File(Frame.userPreferences.get("currentDirectory", ""));
        
        if (currentDir.exists()) {
            chooser.setCurrentDirectory(currentDir);
        }

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Frame.userPreferences.put("currentDirectory", chooser.getCurrentDirectory().getPath());
            exportTypeLocalText.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_exportTypeLocalBrowseActionPerformed

    private void exportTypeLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTypeLocalActionPerformed
        exportTypeLocalBrowse.setEnabled(true);
    }//GEN-LAST:event_exportTypeLocalActionPerformed

    private void exportTypeServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTypeServerActionPerformed
        exportTypeLocalBrowse.setEnabled(false);
    }//GEN-LAST:event_exportTypeServerActionPerformed

    private void exportTypeLocalTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_exportTypeLocalTextFocusGained
        exportTypeLocal.setSelected(true);
        exportTypeLocalBrowse.setEnabled(true);
    }//GEN-LAST:event_exportTypeLocalTextFocusGained

    private void exportTypeServerTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_exportTypeServerTextFocusGained
        exportTypeServer.setSelected(true);
        exportTypeLocalBrowse.setEnabled(false);
    }//GEN-LAST:event_exportTypeServerTextFocusGained

    private void formatFileSingleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatFileSingleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatFileSingleActionPerformed

    private void compressCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_compressCheckboxActionPerformed
    
    private void reset() {
        formatComboBox.setSelectedIndex(0);
        formatFileMultiple.setSelected(true);
        exportTypeLocal.setSelected(true);
        exportTypeLocalText.setText(null);
        exportTypeLocalBrowse.setEnabled(true);
        exportTypeServerText.setText(null);
        compressCheckbox.setSelected(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mirth.connect.client.ui.components.MirthButton buttonCancel;
    private com.mirth.connect.client.ui.components.MirthButton buttonExport;
    private com.mirth.connect.client.ui.components.MirthCheckBox compressCheckbox;
    private javax.swing.JPanel containerPanel;
    private javax.swing.ButtonGroup destinationButtonGroup;
    private javax.swing.JPanel destinationPanel;
    private javax.swing.JRadioButton exportTypeLocal;
    private com.mirth.connect.client.ui.components.MirthButton exportTypeLocalBrowse;
    private javax.swing.JTextField exportTypeLocalText;
    private javax.swing.JRadioButton exportTypeServer;
    private javax.swing.JTextField exportTypeServerText;
    private javax.swing.ButtonGroup formatButtonGroup;
    private com.mirth.connect.client.ui.components.MirthComboBox formatComboBox;
    private javax.swing.JRadioButton formatFileMultiple;
    private javax.swing.JRadioButton formatFileSingle;
    private javax.swing.JPanel formatPanel;
    // End of variables declaration//GEN-END:variables
}
