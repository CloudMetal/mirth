/*
 * MessageTreeTemplate.java
 *
 * Created on February 2, 2007, 2:58 PM
 */

package com.webreach.mirth.client.ui.editors;
import java.util.Properties;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.syntax.jedit.SyntaxDocument;
import org.syntax.jedit.tokenmarker.HL7TokenMarker;

import com.webreach.mirth.client.ui.PlatformUI;
import com.webreach.mirth.client.ui.TreePanel;
import com.webreach.mirth.client.ui.UIConstants;
import com.webreach.mirth.client.ui.beans.EDIProperties;
import com.webreach.mirth.client.ui.beans.X12Properties;
import com.webreach.mirth.model.MessageObject;

/**
 *
 * @author  brendanh
 */
public class MessageTreeTemplate extends javax.swing.JPanel
{
    public final String DEFAULT_TEXT = "Paste a sample message here.";
    
    private SyntaxDocument HL7Doc;
    private TreePanel treePanel;
    private String currentMessage = "";
    private String data;
    private Properties dataProperties;
    
    /** Creates new form MessageTreeTemplate */
    public MessageTreeTemplate()
    {
        
    }
    
    public MessageTreeTemplate(String data)
    {
        this.data = data;
        this.dataProperties = dataProperties;
        
        initComponents();
        
        try
        {
            resizePanes();
        }
        catch (Exception e)
        {
            
        }
        
        if (data.equals(UIConstants.INCOMING_DATA))
        {
            dataType.setEnabled(false);
            setTreePanel("msg", ".toString()");
        }
        else if (data.equals(UIConstants.OUTGOING_DATA))
        {
            dataType.setEnabled(true);
            setTreePanel("tmp", "");
        }
        
        dataType.setModel(new javax.swing.DefaultComboBoxModel(PlatformUI.MIRTH_FRAME.protocols.values().toArray()));
        
        HL7Doc = new SyntaxDocument();
        HL7Doc.setTokenMarker(new HL7TokenMarker());
        pasteBox.setDocument(HL7Doc);
        pasteBox.setFont(EditorConstants.DEFAULT_FONT);
        
        //handles updating the tree
        pasteBox.getDocument().addDocumentListener(new DocumentListener()
        {
            public void changedUpdate(DocumentEvent e)
            {
                updateText();
            }
            
            public void insertUpdate(DocumentEvent e)
            {
                updateText();
            }
            
            public void removeUpdate(DocumentEvent e)
            {
                updateText();
            }
        });
    }
    
    private void updateText()
    {
        String message = pasteBox.getText();
        treePanel.setMessage((String) dataType.getSelectedItem(), message, DEFAULT_TEXT, dataProperties);
        treePanel.revalidate();
        treePanel.repaint();
    }
    
    public void setTreePanel(String prefix, String suffix)
    {
        treePanel = new TreePanel(prefix, suffix);
        treeScrollPane.setViewportView(treePanel);
    }
    
    public String getMessage()
    {
        if(pasteBox.getText().equals(DEFAULT_TEXT))
            return "";
        else
            return pasteBox.getText().replace('\n', '\r');
    }
    
    public void setMessage(String msg)
    {
        if (msg != null)
            msg = msg.replace('\r', '\n');
        pasteBox.setText(msg);
        pasteBoxFocusLost(null);
        updateText();
    }
    
    public void clearMessage()
    {
        treePanel.clearMessage();
        pasteBoxFocusLost(null);
        updateText();
    }
    
    public void setProtocol(String protocol)
    {
        dataType.setSelectedItem(protocol);
    }
    
    public String getProtocol()
    {
        return (String) dataType.getSelectedItem();
    }
    
    public Properties getDataProperties()
    {
        return dataProperties;
    }
    
    public void setDataProperties(Properties p)
    {
        if(p != null)
            dataProperties = p;
        else
            dataProperties = new Properties();
    }
    
    public void resizePanes()
    {
        split.setDividerLocation((int)(PlatformUI.MIRTH_FRAME.currentContentPage.getHeight()/2 - PlatformUI.MIRTH_FRAME.currentContentPage.getHeight()/10));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jLabel1 = new javax.swing.JLabel();
        dataType = new javax.swing.JComboBox();
        split = new javax.swing.JSplitPane();
        pasteBox = new com.webreach.mirth.client.ui.components.MirthSyntaxTextArea();
        treeScrollPane = new javax.swing.JScrollPane();
        properties = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jLabel1.setText("Data Type:");

        dataType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dataType.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                dataTypeActionPerformed(evt);
            }
        });

        split.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        pasteBox.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                pasteBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                pasteBoxFocusLost(evt);
            }
        });

        split.setLeftComponent(pasteBox);

        split.setRightComponent(treeScrollPane);

        properties.setText("Properties");
        properties.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                propertiesActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dataType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(properties)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, split, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(dataType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(properties))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(split, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void propertiesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_propertiesActionPerformed
    {//GEN-HEADEREND:event_propertiesActionPerformed
        if(((String)dataType.getSelectedItem()).equals(PlatformUI.MIRTH_FRAME.protocols.get(MessageObject.Protocol.EDI)))
            new BoundPropertiesSheetDialog(dataProperties, new EDIProperties());
        else if(((String)dataType.getSelectedItem()).equals(PlatformUI.MIRTH_FRAME.protocols.get(MessageObject.Protocol.X12)) )
            new BoundPropertiesSheetDialog(dataProperties, new X12Properties());
            
    }//GEN-LAST:event_propertiesActionPerformed
    
    private void dataTypeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_dataTypeActionPerformed
    {//GEN-HEADEREND:event_dataTypeActionPerformed
        PlatformUI.MIRTH_FRAME.enableSave();
        if(((String)dataType.getSelectedItem()).equals(PlatformUI.MIRTH_FRAME.protocols.get(MessageObject.Protocol.X12)) || 
                ((String)dataType.getSelectedItem()).equals(PlatformUI.MIRTH_FRAME.protocols.get(MessageObject.Protocol.EDI)))
            properties.setEnabled(true);
        else
            properties.setEnabled(false);
        dataProperties = new Properties();
    }//GEN-LAST:event_dataTypeActionPerformed
    
    private void pasteBoxFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_pasteBoxFocusLost
    {//GEN-HEADEREND:event_pasteBoxFocusLost
        if(pasteBox.getText().length() == 0)
        {
            pasteBox.setText(DEFAULT_TEXT);
        }
    }//GEN-LAST:event_pasteBoxFocusLost
    
    private void pasteBoxFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_pasteBoxFocusGained
    {//GEN-HEADEREND:event_pasteBoxFocusGained
        if(pasteBox.getText().equals(DEFAULT_TEXT))
        {
            pasteBox.setText("");
        }
    }//GEN-LAST:event_pasteBoxFocusGained
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox dataType;
    private javax.swing.JLabel jLabel1;
    private com.webreach.mirth.client.ui.components.MirthSyntaxTextArea pasteBox;
    private javax.swing.JButton properties;
    private javax.swing.JSplitPane split;
    private javax.swing.JScrollPane treeScrollPane;
    // End of variables declaration//GEN-END:variables
    
}
