/* The following code was generated by JFlex 1.3.5 on 11/14/02 11:44 AM */

/* HTMLLexer.java is a generated file.  You probably want to
 * edit HTMLLexer.lex to make changes.  Use JFlex to generate it.
 * To generate HTMLLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main HTMLLexer.lex</code><br>
 * You will then have a file called HTMLLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2002 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package com.Ostermiller.Syntax.Lexer;

import java.io.*;

/** 
 * 
 * HTMLLexer is a html 2.0 lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  HTMLLexer shredder = new HTMLLexer(System.in);
 *  HTMLToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 *  
 * <P>
 * There are two HTML Lexers that come with this package.  HTMLLexer is a basic HTML lexer
 * that knows the difference between tags, text, and comments.  HTMLLexer1 knows something
 * about the structure of tags and can return names and values from name value pairs.  It 
 * also knows about text elements such as words and character references.  The two are 
 * similar but which you should use depends on your purpose.  In my opinion the HTMLLexer1
 * is much better for syntax highlighting.
 * 
 * @see HTMLLexer1
 * @see HTMLToken
 */ 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/14/02 11:44 AM from the specification file
 * <tt>file:/home/steveo/personal/projects/java/com/Ostermiller/Syntax/Lexer/HTMLLexer.lex</tt>
 */
public class HTMLLexer implements Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int SCRIPT = 1;
  final public static int YYINITIAL = 0;
  final public static int PRE = 2;
  final public static int TEXTAREA = 3;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  3,  0,  3,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 15, 10,  0,  0, 30,  4, 11,  0,  0,  0,  0,  0, 31,  1, 14, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9, 13, 12, 16, 29, 
     0, 28,  2, 19, 17, 23,  2,  2,  2, 26,  2,  2,  2,  2,  2, 18, 
    22,  2, 25, 24, 20,  2,  2,  2, 27, 21,  2,  0,  0,  0,  0,  0, 
     0, 28,  6, 19, 17, 23,  2,  2,  2, 26,  2,  2,  2,  2,  5, 18, 
     8,  2, 25,  7, 20,  2,  2,  2, 27, 21,  2,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    32,    64,    96,   128,   160,   192,   224,   256,   288, 
      320,   352,   384,   416,   448,   480,   512,   544,   576,   608, 
      640,   672,   704,   736,   768,   800,   832,   864,   896,   928, 
      576,   960,   992,  1024,  1056,  1088,  1120,   576,  1152,  1184, 
     1216,  1248,  1280,  1312,  1344,  1376,  1408,  1440,  1472,  1504, 
     1536,  1568,  1600,  1632,  1664,  1696,  1728,  1760,  1792,  1824, 
     1856,  1888,  1920,  1952,  1984,  2016,  2048,   576,  2080,  2112, 
     2144,  2176,  2208,  1248,  2240,   576,  1312,  2272,  2304,  2336, 
     2368,   192,  2400,  2432,  2464,  2496,  2528,   256,  2560,  2592, 
     2624,  2656,  2688,   320,  2720,  2752,  2784,  2816,  2848,  2880, 
     2912,  2944,  2976,  3008,   576,  3040,  3072,  3104,  3136,  3168, 
     3200,  3232,  3264,  3296,  3328,  3360,  3392,  3424,  3456,  3488, 
     3520,  3552,  3584,  3616,  3648,  3680,  3712,  3744,  3776,  3808, 
     3840,  3872,  3904,  3936,  3968,  4000,  4032,  3168,  4064,  4096, 
     4128,  4160,  4192,  4224,  4256,  4288,  4320,  4352,   576,  4384, 
     4416,  4448,  4480,  4512,  4544,  3712,  4576,  3744,  4608,  4640, 
     4672,  4704,  4736,  4768,  4800,  4832,  4864,  4896,  4928,  4960, 
     4992,  5024,  5056,  5088,  5120,  5152,  5184,  5216,  5248,  5280, 
     5312,  5344,  5376,  5408,  5440,  5472,  5504,  5536,  5568,   576, 
     5600,  5632,  5664,  5696,  5728,  5760,  5792,  5824,  5856,  5888, 
     5920,  5952,  5984,  6016,  6048,  6080,  6112,  6144,  6176,  6208, 
     6240,  6272,  6304,  6336,  6368,  6400,  6432,  6464,  6496,  5696, 
     6528,  5728,  6560,  6592,  6624,  6656,  6688,  6720,  6752,  6784, 
     6816,  6848,  6880,  6912,  6944,  6976,  7008,  7040,  7072,  7104, 
     7136,  7168,  7200,  7232,  7264,  7296,   576,  7328,  7360,  7392, 
     7424,   576,  7456,  7488,  7520,  7552,  7584,  7616,  7648,  7680, 
     7712,  7744,  7776,  7808,  7840,  7872,  7904,  7936,  7968,  8000, 
     8032,  8064,  8096,  8128,  8160,  8192,  8224,  8256,  8288,  8320, 
     8352,  8384,  7712,  8416,  7744,  8448,  8480,  8512,  8544,  8576, 
     7968,  8608,  8000,  8640,  8672,  8704,  8736,  8768,  8800,  8832, 
     8864,  8896,  8928,  8960,  8992,  9024,  9056,  9088,  9120,  9152, 
     9184,  9216,  9248,  9280,  9312,  9344,  9376,  9408,  9440,  9472, 
     9504,  9536,  9568,  9600,  9632,  9664,  9696,  9728,  9280,  9760, 
     9312,  9792,  9824,  9856,  9888,  9920,  9952,  9984, 10016, 10048, 
    10080, 10112, 10144, 10176, 10208, 10240, 10272, 10304, 10336, 10368, 
    10400, 10432, 10464, 10496, 10528, 10560, 10592, 10624, 10656, 10688, 
    10720, 10752, 10784, 10816, 10848, 10880, 10912, 10944, 10976, 11008, 
    11040
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\15\5\1\6\22\5\15\7\1\10\22\7\15\11\1\12"+
    "\22\11\15\13\1\14\22\13\15\5\1\0\22\5\2\15"+
    "\1\16\2\15\2\16\1\17\1\20\5\15\1\21\1\22"+
    "\1\23\3\16\1\24\1\16\1\20\1\16\1\17\4\16"+
    "\1\25\1\26\1\15\15\7\1\27\37\7\1\27\1\30"+
    "\21\7\15\11\1\31\37\11\1\31\1\32\21\11\15\13"+
    "\1\33\37\13\1\33\1\34\21\13\20\15\1\23\20\15"+
    "\2\35\1\16\1\36\4\35\7\15\1\37\14\35\2\15"+
    "\1\35\1\15\2\35\1\16\1\36\4\35\7\15\1\37"+
    "\2\35\1\40\11\35\2\15\1\35\1\15\2\35\1\16"+
    "\1\36\4\35\7\15\1\37\10\35\1\41\3\35\2\15"+
    "\1\35\2\15\1\42\1\21\1\43\4\42\7\15\1\23"+
    "\14\42\6\15\1\44\1\45\13\15\1\46\1\47\15\15"+
    "\1\50\40\0\1\15\2\35\1\16\1\36\4\35\7\15"+
    "\1\37\6\35\1\51\5\35\2\15\1\35\20\25\1\52"+
    "\14\25\1\53\2\25\20\26\1\54\15\26\1\55\1\26"+
    "\15\7\1\27\1\56\23\7\1\57\1\60\1\61\2\57"+
    "\1\62\1\57\4\7\1\27\3\7\7\57\1\62\4\57"+
    "\3\7\15\11\1\31\1\63\23\11\1\64\1\65\1\66"+
    "\3\64\1\67\4\11\1\31\3\11\5\64\1\67\6\64"+
    "\3\11\15\13\1\33\1\70\23\13\1\71\1\72\1\73"+
    "\4\71\4\13\1\33\3\13\3\71\1\74\10\71\3\13"+
    "\1\15\3\35\1\75\4\35\3\15\1\76\3\15\1\37"+
    "\14\35\2\15\1\35\5\15\1\77\12\15\1\23\20\15"+
    "\3\35\1\75\4\35\3\15\1\76\3\15\1\37\10\35"+
    "\1\100\3\35\2\15\1\35\1\15\3\35\1\75\4\35"+
    "\3\15\1\76\3\15\1\37\6\35\1\101\5\35\2\15"+
    "\1\35\1\15\2\42\1\102\1\103\4\42\7\15\1\104"+
    "\14\42\2\15\1\42\5\15\1\105\12\15\1\23\22\15"+
    "\1\44\1\45\13\15\1\23\16\15\1\50\5\15\1\106"+
    "\12\15\1\23\37\15\1\23\1\15\1\107\35\15\1\23"+
    "\16\15\1\110\1\15\3\35\1\75\4\35\3\15\1\76"+
    "\3\15\1\37\12\35\1\111\1\35\2\15\1\35\35\112"+
    "\1\113\2\112\20\25\1\114\14\25\1\53\2\25\36\115"+
    "\1\116\1\115\20\26\1\114\15\26\1\55\1\26\7\7"+
    "\1\117\5\7\1\27\12\7\1\117\10\7\2\57\1\120"+
    "\1\121\4\57\4\7\1\27\2\7\1\122\14\57\2\7"+
    "\1\57\2\7\1\57\1\60\1\61\4\57\4\7\1\27"+
    "\3\7\14\57\10\7\1\123\7\7\1\27\23\7\2\57"+
    "\1\120\1\121\4\57\4\7\1\27\2\7\1\122\2\57"+
    "\1\124\11\57\2\7\1\57\10\11\1\125\4\11\1\31"+
    "\10\11\1\125\12\11\2\64\1\126\1\127\4\64\4\11"+
    "\1\31\2\11\1\130\14\64\2\11\1\64\2\11\1\64"+
    "\1\65\1\66\4\64\4\11\1\31\3\11\14\64\10\11"+
    "\1\131\7\11\1\31\23\11\2\64\1\126\1\127\4\64"+
    "\4\11\1\31\2\11\1\130\10\64\1\132\3\64\2\11"+
    "\1\64\15\13\1\33\6\13\1\133\14\13\2\71\1\134"+
    "\1\135\4\71\4\13\1\33\2\13\1\136\14\71\2\13"+
    "\1\71\2\13\1\71\1\72\1\73\4\71\4\13\1\33"+
    "\3\13\14\71\10\13\1\137\7\13\1\33\23\13\2\71"+
    "\1\134\1\135\4\71\4\13\1\0\2\13\1\136\6\71"+
    "\1\140\5\71\2\13\1\71\5\15\1\141\12\15\1\23"+
    "\20\15\2\16\1\76\1\142\4\16\1\15\1\143\1\144"+
    "\4\15\1\23\14\16\2\15\1\16\6\15\1\145\11\15"+
    "\1\23\20\15\3\35\1\75\4\35\3\15\1\76\3\15"+
    "\1\37\11\35\1\146\2\35\2\15\1\35\1\15\2\147"+
    "\1\101\1\150\4\147\3\15\1\76\3\15\1\151\14\147"+
    "\2\15\1\147\3\15\1\102\1\103\13\15\1\104\24\15"+
    "\1\152\12\15\1\23\25\15\1\153\11\15\1\23\25\15"+
    "\1\154\11\15\1\23\37\15\1\23\2\15\1\155\14\15"+
    "\20\110\1\156\16\110\1\157\1\15\3\35\1\75\4\35"+
    "\3\15\1\76\3\15\1\37\3\35\1\160\10\35\2\15"+
    "\1\35\20\112\1\114\14\112\1\113\2\112\20\115\1\114"+
    "\15\115\1\116\1\115\15\7\1\27\5\7\1\161\17\7"+
    "\1\120\1\121\10\7\1\27\2\7\1\122\24\7\1\162"+
    "\7\7\1\27\30\7\1\163\6\7\1\27\23\7\2\57"+
    "\1\120\1\121\4\57\4\7\1\27\2\7\1\122\10\57"+
    "\1\164\3\57\2\7\1\57\15\11\1\31\13\11\1\165"+
    "\11\11\1\126\1\127\10\11\1\31\2\11\1\130\24\11"+
    "\1\166\7\11\1\31\30\11\1\167\6\11\1\31\23\11"+
    "\2\64\1\126\1\127\4\64\4\11\1\31\2\11\1\130"+
    "\6\64\1\170\5\64\2\11\1\64\15\13\1\0\11\13"+
    "\1\171\13\13\1\134\1\135\10\13\1\33\2\13\1\136"+
    "\24\13\1\172\7\13\1\33\30\13\1\173\6\13\1\33"+
    "\23\13\2\71\1\134\1\135\4\71\4\13\1\0\2\13"+
    "\1\136\12\71\1\174\1\71\2\13\1\71\6\15\1\175"+
    "\11\15\1\23\24\15\1\176\12\15\1\23\17\15\12\143"+
    "\1\16\5\143\1\177\17\143\13\144\1\16\4\144\1\200"+
    "\17\144\7\15\1\201\10\15\1\23\20\15\3\35\1\75"+
    "\3\35\1\202\3\15\1\76\3\15\1\37\5\35\1\202"+
    "\6\35\2\15\1\35\1\15\3\147\1\203\4\147\3\15"+
    "\1\204\3\15\1\151\14\147\2\15\1\147\5\15\1\205"+
    "\12\15\1\23\25\15\1\206\11\15\1\23\26\15\1\207"+
    "\10\15\1\23\26\15\1\210\10\15\1\23\37\15\1\23"+
    "\3\15\1\211\13\15\37\212\1\213\20\110\1\156\16\110"+
    "\1\214\1\15\3\35\1\75\4\35\3\15\1\76\3\15"+
    "\1\37\13\35\1\215\2\15\1\35\15\7\1\27\13\7"+
    "\1\216\14\7\1\217\6\7\1\27\31\7\1\220\5\7"+
    "\1\27\23\7\2\57\1\120\1\121\4\57\4\7\1\27"+
    "\2\7\1\122\11\57\1\221\2\57\2\7\1\57\15\11"+
    "\1\31\11\11\1\222\16\11\1\223\6\11\1\31\31\11"+
    "\1\224\5\11\1\31\23\11\2\64\1\126\1\127\4\64"+
    "\4\11\1\31\2\11\1\225\14\64\2\11\1\64\15\13"+
    "\1\0\15\13\1\226\12\13\1\227\6\13\1\33\31\13"+
    "\1\230\5\13\1\33\23\13\2\71\1\134\1\135\4\71"+
    "\4\13\1\0\2\13\1\136\3\71\1\231\10\71\2\13"+
    "\1\71\7\15\1\232\10\15\1\23\25\15\1\233\11\15"+
    "\1\23\17\15\12\234\1\235\25\234\13\236\1\235\24\236"+
    "\10\15\1\237\7\15\1\23\20\15\3\35\1\75\4\35"+
    "\3\15\1\76\3\15\1\37\3\35\1\240\10\35\2\15"+
    "\1\35\5\15\1\241\12\15\1\23\20\15\2\242\1\204"+
    "\1\243\4\242\1\15\1\244\1\245\4\15\1\23\14\242"+
    "\2\15\1\242\6\15\1\246\11\15\1\23\26\15\1\247"+
    "\10\15\1\23\27\15\1\250\7\15\1\23\27\15\1\251"+
    "\7\15\1\23\37\15\1\23\4\15\1\252\12\15\37\212"+
    "\1\253\3\15\1\214\1\254\13\15\1\46\16\15\1\50"+
    "\1\15\3\35\1\75\4\35\3\15\1\76\3\15\1\37"+
    "\10\35\1\255\3\35\2\15\1\35\15\7\1\27\14\7"+
    "\1\256\14\7\1\257\5\7\1\27\32\7\1\260\4\7"+
    "\1\27\23\7\2\57\1\120\1\121\3\57\1\261\4\7"+
    "\1\27\2\7\1\122\5\57\1\261\6\57\2\7\1\57"+
    "\15\11\1\31\2\11\1\0\26\11\1\262\5\11\1\31"+
    "\32\11\1\263\4\11\1\31\22\11\15\13\1\0\6\13"+
    "\1\264\22\13\1\265\5\13\1\33\32\13\1\266\4\13"+
    "\1\33\23\13\2\71\1\134\1\135\4\71\4\13\1\0"+
    "\2\13\1\136\13\71\1\267\2\13\1\71\10\15\1\270"+
    "\7\15\1\23\26\15\1\271\10\15\1\23\17\15\1\0"+
    "\2\272\1\235\1\273\4\272\7\0\1\37\14\272\2\0"+
    "\1\272\11\15\1\16\6\15\1\23\20\15\2\274\1\240"+
    "\1\275\4\274\3\15\1\76\3\15\1\276\14\274\2\15"+
    "\1\274\6\15\1\277\11\15\1\23\20\15\2\147\1\242"+
    "\1\300\4\147\7\15\1\151\14\147\2\15\1\147\5\15"+
    "\1\301\12\15\1\23\17\15\12\244\1\242\5\244\1\302"+
    "\17\244\13\245\1\242\4\245\1\303\17\245\7\15\1\304"+
    "\10\15\1\23\27\15\1\305\7\15\1\23\30\15\1\21"+
    "\6\15\1\23\30\15\1\44\6\15\1\23\27\15\1\306"+
    "\7\15\1\23\5\15\1\306\11\15\3\0\1\253\1\307"+
    "\13\0\1\46\16\0\1\310\5\15\1\311\12\15\1\23"+
    "\20\15\3\35\1\75\4\35\3\15\1\76\3\15\1\37"+
    "\6\35\1\312\5\35\2\15\1\35\10\7\1\313\4\7"+
    "\1\27\10\7\1\313\21\7\1\314\4\7\1\27\33\7"+
    "\1\60\3\7\1\27\23\7\2\57\1\120\1\121\4\57"+
    "\4\7\1\27\2\7\1\122\3\57\1\315\10\57\2\7"+
    "\1\57\10\11\1\316\4\11\1\31\33\11\1\65\3\11"+
    "\1\31\22\11\15\13\1\0\16\13\1\317\13\13\1\320"+
    "\4\13\1\33\33\13\1\72\3\13\1\33\23\13\2\71"+
    "\1\134\1\135\4\71\4\13\1\0\2\13\1\136\10\71"+
    "\1\321\3\71\2\13\1\71\11\15\1\35\6\15\1\23"+
    "\27\15\1\322\7\15\1\23\17\15\1\0\3\272\1\323"+
    "\4\272\3\0\1\324\3\0\1\37\14\272\2\0\1\272"+
    "\5\0\1\325\32\0\1\15\3\274\1\326\4\274\3\15"+
    "\1\327\3\15\1\276\14\274\2\15\1\274\5\15\1\330"+
    "\12\15\1\23\26\15\1\331\10\15\1\23\24\15\1\332"+
    "\12\15\1\23\25\15\1\333\11\15\1\23\17\15\12\334"+
    "\1\335\25\334\13\336\1\335\24\336\10\15\1\337\7\15"+
    "\1\23\30\15\1\102\6\15\1\23\37\15\1\23\6\15"+
    "\1\340\10\15\5\0\1\341\71\0\1\212\6\15\1\342"+
    "\11\15\1\23\20\15\3\35\1\75\4\35\3\15\1\76"+
    "\3\15\1\37\13\35\1\343\2\15\1\35\15\7\1\27"+
    "\6\7\1\344\24\7\1\120\3\7\1\27\23\7\2\57"+
    "\1\120\1\121\4\57\4\7\1\27\2\7\1\225\14\57"+
    "\2\7\1\57\11\11\1\126\3\11\1\31\22\11\15\13"+
    "\1\0\13\13\1\345\17\13\1\134\3\13\1\33\23\13"+
    "\2\71\1\134\1\135\4\71\4\13\1\0\2\13\1\136"+
    "\6\71\1\346\5\71\2\13\1\71\11\15\1\76\6\15"+
    "\1\23\17\15\5\0\1\347\33\0\2\235\1\324\1\350"+
    "\4\235\1\0\1\234\1\236\5\0\14\235\2\0\1\235"+
    "\6\0\1\351\31\0\5\15\1\352\12\15\1\23\20\15"+
    "\2\353\1\327\1\354\4\353\1\15\1\355\1\356\4\15"+
    "\1\23\14\353\2\15\1\353\6\15\1\357\11\15\1\23"+
    "\27\15\1\360\7\15\1\23\25\15\1\361\11\15\1\23"+
    "\26\15\1\362\10\15\1\23\17\15\1\0\2\363\1\335"+
    "\1\364\4\363\7\0\1\151\14\363\2\0\1\363\11\15"+
    "\1\101\6\15\1\23\17\15\12\340\1\365\1\366\4\340"+
    "\1\367\17\340\6\0\1\370\31\0\7\15\1\371\10\15"+
    "\1\23\20\15\2\372\1\343\1\373\4\372\3\15\1\76"+
    "\3\15\1\374\14\372\2\15\1\372\15\7\1\27\2\7"+
    "\1\0\17\7\15\13\1\0\11\13\1\375\11\13\2\71"+
    "\1\134\1\135\4\71\4\13\1\0\2\13\1\136\13\71"+
    "\1\376\2\13\1\71\6\0\1\377\36\0\1\u0100\41\0"+
    "\1\u0101\30\0\6\15\1\u0102\11\15\1\23\20\15\2\274"+
    "\1\353\1\u0103\4\274\7\15\1\276\14\274\2\15\1\274"+
    "\5\15\1\u0104\12\15\1\23\17\15\12\355\1\353\5\355"+
    "\1\u0105\17\355\13\356\1\353\4\356\1\u0106\17\356\7\15"+
    "\1\u0107\10\15\1\23\30\15\1\147\6\15\1\23\26\15"+
    "\1\u0108\10\15\1\23\27\15\1\u0109\7\15\1\23\17\15"+
    "\1\0\3\363\1\u010a\4\363\3\0\1\u010b\3\0\1\151"+
    "\14\363\2\0\1\363\5\0\1\u010c\32\0\12\365\1\340"+
    "\5\365\1\u010d\17\365\13\366\1\340\4\366\1\u010e\17\366"+
    "\7\0\1\u010f\30\0\10\15\1\u0110\7\15\1\23\20\15"+
    "\3\372\1\u0111\4\372\3\15\1\u0112\3\15\1\374\14\372"+
    "\2\15\1\372\5\15\1\u0113\12\15\1\23\17\15\15\13"+
    "\1\0\16\13\1\u0114\4\13\2\71\1\134\1\135\4\71"+
    "\4\13\1\0\2\13\1\225\14\71\2\13\1\71\7\0"+
    "\1\u0115\36\0\1\u0116\41\0\1\u0117\27\0\7\15\1\u0118"+
    "\10\15\1\23\24\15\1\u0119\12\15\1\23\25\15\1\u011a"+
    "\11\15\1\23\17\15\12\u011b\1\u011c\25\u011b\13\u011d\1\u011c"+
    "\24\u011d\10\15\1\u011e\7\15\1\23\27\15\1\u011f\7\15"+
    "\1\23\30\15\1\204\6\15\1\23\17\15\5\0\1\u0120"+
    "\33\0\2\335\1\u010b\1\u0121\4\335\1\0\1\334\1\336"+
    "\5\0\14\335\2\0\1\335\6\0\1\u0122\31\0\12\u0123"+
    "\1\u0124\25\u0123\13\u0125\1\u0124\24\u0125\10\0\1\u0126\27\0"+
    "\11\15\1\214\6\15\1\23\24\15\1\u0127\12\15\1\23"+
    "\20\15\2\u0128\1\u0112\1\u0129\4\u0128\1\15\1\u012a\1\u012b"+
    "\4\15\1\23\14\u0128\2\15\1\u0128\6\15\1\u012c\11\15"+
    "\1\23\17\15\15\13\1\0\2\13\1\0\17\13\10\0"+
    "\1\u012d\36\0\1\u012e\41\0\1\235\26\0\10\15\1\u012f"+
    "\7\15\1\23\25\15\1\u0130\11\15\1\23\26\15\1\u0131"+
    "\10\15\1\23\17\15\1\0\2\u0132\1\u011c\1\u0133\4\u0132"+
    "\7\0\1\276\14\u0132\2\0\1\u0132\11\15\1\240\6\15"+
    "\1\23\30\15\1\242\6\15\1\23\17\15\6\0\1\u0134"+
    "\36\0\1\u0135\41\0\1\u0136\30\0\12\u0124\1\u0123\1\u0125"+
    "\4\u0124\1\367\17\u0124\11\0\1\253\26\0\6\15\1\u0137"+
    "\11\15\1\23\20\15\2\372\1\u0128\1\u0138\4\372\7\15"+
    "\1\374\14\372\2\15\1\372\5\15\1\u0139\12\15\1\23"+
    "\17\15\12\u012a\1\u0128\5\u012a\1\u013a\17\u012a\13\u012b\1\u0128"+
    "\4\u012b\1\u013b\17\u012b\7\15\1\u013c\10\15\1\23\17\15"+
    "\11\0\1\272\36\0\1\u013d\27\0\11\15\1\274\6\15"+
    "\1\23\26\15\1\u013e\10\15\1\23\27\15\1\u013f\7\15"+
    "\1\23\17\15\1\0\3\u0132\1\u0140\4\u0132\3\0\1\u0141"+
    "\3\0\1\276\14\u0132\2\0\1\u0132\5\0\1\u0142\41\0"+
    "\1\u0143\36\0\1\u0144\41\0\1\u0145\27\0\7\15\1\u0146"+
    "\10\15\1\23\24\15\1\u0147\12\15\1\23\25\15\1\u0148"+
    "\11\15\1\23\17\15\12\u0149\1\u014a\25\u0149\13\u014b\1\u014a"+
    "\24\u014b\10\15\1\u014c\7\15\1\23\17\15\11\0\1\324"+
    "\26\0\10\15\1\u014d\7\15\1\23\30\15\1\327\6\15"+
    "\1\23\17\15\5\0\1\u014e\33\0\2\u011c\1\u0141\1\u014f"+
    "\4\u011c\1\0\1\u011b\1\u011d\5\0\14\u011c\2\0\1\u011c"+
    "\6\0\1\u0150\41\0\1\u0151\36\0\1\u0152\41\0\1\335"+
    "\26\0\10\15\1\u0153\7\15\1\23\25\15\1\u0154\11\15"+
    "\1\23\26\15\1\u0155\10\15\1\23\17\15\1\0\2\u0156"+
    "\1\u014a\1\u0157\4\u0156\7\0\1\374\14\u0156\2\0\1\u0156"+
    "\11\15\1\343\6\15\1\23\30\15\1\353\6\15\1\23"+
    "\17\15\6\0\1\u0158\36\0\1\u0159\41\0\1\u015a\41\0"+
    "\1\363\36\0\1\u015b\27\0\11\15\1\372\6\15\1\23"+
    "\26\15\1\u015c\10\15\1\23\27\15\1\u015d\7\15\1\23"+
    "\17\15\1\0\3\u0156\1\u015e\4\u0156\3\0\1\u015f\3\0"+
    "\1\374\14\u0156\2\0\1\u0156\5\0\1\u0160\41\0\1\u0161"+
    "\36\0\1\u0162\41\0\1\u0163\40\0\1\u010b\26\0\10\15"+
    "\1\u0164\7\15\1\23\30\15\1\u0112\6\15\1\23\17\15"+
    "\5\0\1\u0165\33\0\2\u014a\1\u015f\1\u0166\4\u014a\1\0"+
    "\1\u0149\1\u014b\5\0\14\u014a\2\0\1\u014a\6\0\1\u0167"+
    "\41\0\1\u0168\36\0\1\u0169\41\0\1\u011c\26\0\11\15"+
    "\1\u0128\6\15\1\23\17\15\6\0\1\u016a\36\0\1\u016b"+
    "\41\0\1\u016c\41\0\1\u0132\36\0\1\u016d\36\0\1\u016e"+
    "\36\0\1\u016f\41\0\1\u0170\40\0\1\u0141\36\0\1\u0171"+
    "\36\0\1\u0172\41\0\1\u014a\37\0\1\u0156\36\0\1\u0173"+
    "\40\0\1\u015f\26\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  0,  1,  0,  1,  0,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  0,  0,  9,  0,  0,  0,  1, 
     1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     0,  1,  1,  1,  0,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  0,  1,  1, 
     1,  0,  1,  1,  9,  0,  1,  1,  1,  1,  1,  0,  0,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1, 
     1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  0,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  0,  1,  1,  1,  0,  1, 
     1,  1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0,  1,  1, 
     0,  1,  1,  0,  0,  1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  1,  1,  9,  0,  1,  1,  1,  9,  0,  1,  0,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  1,  1,  0,  1, 
     1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  1,  1,  0, 
     0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1, 
     1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0, 
     0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  1,  1,  0,  0,  0, 
     0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0, 
     0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */

	private int lastToken;

    private int nextState=YYINITIAL;
	
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }

    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }                   
            } else {
                in = System.in;
            }       
            HTMLLexer shredder = new HTMLLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != CToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    }

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HTMLLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public HTMLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[11072];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 189: 
          { 
    nextState = SCRIPT;
	lastToken = HTMLToken.START_TAG;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 372: break;
        case 246: 
          { 
	lastToken = HTMLToken.DOCTYPE_TAG;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 373: break;
        case 11: 
        case 27: 
        case 59: 
        case 95: 
        case 123: 
        case 152: 
        case 182: 
        case 208: 
        case 229: 
        case 253: 
          { 
	lastToken = HTMLToken.SCRIPT;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 374: break;
        case 9: 
        case 25: 
        case 54: 
        case 89: 
        case 119: 
          { 
	lastToken = HTMLToken.SCRIPT;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 375: break;
        case 7: 
        case 23: 
        case 49: 
        case 83: 
        case 115: 
        case 144: 
        case 176: 
        case 204: 
          { 
	lastToken = HTMLToken.SCRIPT;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 376: break;
        case 1: 
        case 6: 
        case 46: 
        case 47: 
        case 48: 
        case 79: 
        case 80: 
        case 82: 
        case 113: 
        case 114: 
        case 142: 
        case 143: 
        case 174: 
        case 175: 
        case 203: 
          { 
	lastToken = HTMLToken.SCRIPT;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 377: break;
        case 75: 
          { 
	lastToken = HTMLToken.SCRIPT;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 378: break;
        case 3: 
        case 10: 
        case 56: 
        case 57: 
        case 58: 
        case 91: 
        case 92: 
        case 94: 
        case 121: 
        case 122: 
        case 150: 
        case 151: 
        case 180: 
        case 181: 
        case 207: 
          { 
	lastToken = HTMLToken.TEXT;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 379: break;
        case 2: 
        case 8: 
        case 51: 
        case 52: 
        case 53: 
        case 85: 
        case 86: 
        case 88: 
        case 117: 
        case 118: 
        case 146: 
        case 147: 
        case 177: 
        case 178: 
        case 205: 
          { 
	lastToken = HTMLToken.TEXT;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 380: break;
        case 0: 
        case 4: 
          { 
	lastToken = HTMLToken.TEXT;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 381: break;
        case 251: 
          { 
    nextState = TEXTAREA;
	lastToken = HTMLToken.START_TAG;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 382: break;
        case 30: 
          { 
	lastToken = HTMLToken.START_TAG;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 383: break;
        case 37: 
          { 
	lastToken = HTMLToken.COMMENT;
    String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 384: break;
        case 104: 
          { 
    nextState = PRE;
	lastToken = HTMLToken.START_TAG;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 385: break;
        case 81: 
        case 87: 
        case 93: 
        case 148: 
          { 
    nextState = YYINITIAL;
	lastToken = HTMLToken.END_TAG;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 386: break;
        case 5: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 19: 
        case 20: 
        case 21: 
        case 28: 
        case 29: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 38: 
        case 39: 
        case 40: 
        case 42: 
        case 44: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 110: 
        case 111: 
        case 124: 
        case 125: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 139: 
        case 140: 
        case 153: 
        case 154: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 171: 
        case 172: 
        case 183: 
        case 184: 
        case 187: 
        case 188: 
        case 190: 
        case 191: 
        case 192: 
        case 195: 
        case 196: 
        case 197: 
        case 200: 
        case 201: 
        case 209: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 222: 
        case 223: 
        case 225: 
        case 226: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 244: 
        case 245: 
        case 248: 
        case 249: 
        case 250: 
        case 257: 
        case 258: 
        case 259: 
        case 262: 
        case 263: 
        case 264: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 279: 
        case 280: 
        case 281: 
        case 285: 
        case 286: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 302: 
        case 303: 
        case 304: 
        case 310: 
        case 311: 
        case 312: 
        case 315: 
        case 317: 
        case 318: 
        case 325: 
        case 326: 
        case 327: 
        case 331: 
        case 332: 
        case 338: 
        case 339: 
        case 340: 
        case 347: 
        case 348: 
        case 355: 
          { 
	lastToken = HTMLToken.ERROR_MALFORMED_TAG;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 387: break;
        case 18: 
        case 41: 
        case 43: 
        case 109: 
        case 126: 
        case 127: 
        case 193: 
        case 194: 
        case 260: 
        case 261: 
        case 268: 
        case 269: 
        case 313: 
        case 314: 
          { 
	lastToken = HTMLToken.ERROR_MALFORMED_TAG;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 388: break;
        case 67: 
          { 
	lastToken = HTMLToken.END_TAG;
	String text = yytext();    
	HTMLToken t = (new HTMLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 389: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
