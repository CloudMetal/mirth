/* The following code was generated by JFlex 1.3.5 on 4/3/03 4:00 PM */

/* CLexer.java is a generated file.  You probably want to
 * edit CLexer.lex to make changes.  Use JFlex to generate it.
 * To generate CLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main CLexer.lex</code><br>
 * You will then have a file called CLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2003 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 * Copyright (C) 2003 Elliott Hughes <ehughes@bluearc.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package com.Ostermiller.Syntax.Lexer;

import java.io.*;

/** 
 * CLexer is a c language lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  CLexer shredder = new CLexer(System.in);
 *  CToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 * 
 * @see CToken
 */ 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 4/3/03 4:00 PM from the specification file
 * <tt>file:/home/steveo/personal/projects/java/com/Ostermiller/Syntax/Lexer/CLexer.lex</tt>
 */
public class CLexer implements Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int PREPROCESSOR = 2;
  final public static int YYINITIAL = 0;
  final public static int MIDDLE_OF_LINE = 1;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 34, 36,  0, 34, 35,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    34, 17, 42,  1, 43, 37, 63, 11,  5,  7, 44, 48, 61, 19, 51,  9, 
    31, 32, 32, 32, 30, 30, 30, 30, 29, 29, 62, 60, 13,  3, 15,  2, 
     0, 28, 28, 28, 28, 49, 50, 33, 33, 33, 33, 33, 45, 33, 33, 33, 
    33, 33, 33, 33, 33, 46, 33, 33, 38, 33, 33,  4,  8,  6, 10, 55, 
     0, 25, 39, 53, 54, 23, 24, 57, 68, 52, 33, 65, 26, 58, 40, 59, 
    56, 64, 21, 27, 20, 22, 41, 67, 47, 69, 66, 12, 16, 14, 18,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    70,   140,   210,   280,   350,   420,   490,   490,   490, 
      490,   560,   630,   700,   490,   770,   490,   840,   910,   980, 
      490,  1050,  1120,  1190,  1260,  1330,  1400,  1470,  1540,  1610, 
     1680,  1750,  1820,  1890,  1960,  2030,  2100,  2170,  2240,  2310, 
     2380,  2450,  2520,  2590,  2660,  2730,  2800,  2870,  2940,  3010, 
     3080,   490,   490,   490,  3150,  3220,  3290,  3360,  3430,  3500, 
     3570,  3640,  3710,  3780,  3850,  3920,  3990,  4060,  4130,  4200, 
     4270,  4340,  4410,  4480,   490,   490,  4550,  4620,   490,  4690, 
     4760,  4830,   490,   490,  4900,   490,  4970,  5040,   490,   490, 
      490,   490,   490,   490,  5110,  5180,  5250,  5320,  5390,  5460, 
     5530,  5600,  5670,  5740,  5810,  5880,  5950,  6020,  6090,  6160, 
     6230,  6300,  6370,  6440,  6510,  6580,  6650,  6720,  6790,  6860, 
     6930,  7000,  7070,  7140,  7210,   490,  7280,  7350,  7420,  7490, 
     7560,  7630,  7700,  7770,  7840,  7910,   490,   490,  7980,   490, 
      490,  8050,  1680,  8120,  8190,  8260,  8330,  8400,  8470,  8540, 
     8610,  8680,  8750,  8820,  8890,  8960,  9030,  9100,   490,   490, 
     9170,  9240,  9310,  9380,  9450,  9520,  9590,  9660,  9730,  9800, 
     9870,  9940, 10010, 10080, 10150, 10220, 10290, 10360, 10430, 10500, 
    10570, 10640, 10710, 10780, 10850, 10920, 10990, 11060, 11130,   490, 
    11200, 11270, 11340, 11410, 11480,   490,   490, 11550, 11620,  1680, 
    11690, 11760, 11830, 11900, 11970, 12040, 12110, 12180, 12250, 12320, 
    12390, 12460, 12530, 12600, 12670, 12740, 12810,  1680, 12880,  1680, 
    12950, 13020, 13090, 13160, 13230, 13300, 13370, 13440, 13510,  6650, 
    13580, 13650,  6650, 13720, 13790, 13860, 13930, 14000, 14070,  1680, 
    14140, 14210, 14280, 14350, 14420, 14490, 14560, 14630, 14700, 14770, 
    14840, 14910, 14980,   490,  1680, 15050, 15120, 15190, 15260, 15330, 
    15400, 15470, 15540, 15610, 15680, 15750, 15820, 15890, 15960, 16030, 
    16100, 16170, 16240, 16310, 16380, 16450, 16520, 16590, 16660, 16730, 
    16800, 16870, 16940, 17010, 17080, 17150, 17220, 17290, 17360, 17430, 
    17500, 17570, 17640, 17710, 17780, 17850, 17920,   490, 17990, 18060, 
    18130, 18200, 18270,  1680, 18340, 18410,  1680, 18480, 18550, 18620, 
    18690, 18760, 18830, 18900,  1680,  1680, 18970, 19040, 19110, 19180, 
    19250,  1680, 19320,  1680, 19390, 19460, 19530, 19600, 19670, 19740, 
    19810,  6650, 19880, 19950, 20020, 20090, 20160,  1680, 20230, 20300, 
    20370, 20440,  1680, 20510,   490, 20580, 20650, 20720, 20790, 20860, 
    20930,  1680, 21000, 21070, 21140, 21210,  1680, 21280, 21350, 21420, 
    21490, 21560, 21630, 21700,  1680, 21770, 21840, 21910, 21980, 22050, 
    22120,   490, 22190, 22260, 22330, 22400, 22470, 22540, 22610, 22680, 
    22750, 22820, 22890, 22960,   490, 23030, 23100, 23170, 23240,  1680, 
    23310, 23380, 23450, 23520, 23590, 23660,  1680, 23730,  1680, 23800, 
    23870, 23940, 24010,  1680, 24080, 24150, 24220, 24290, 24360, 24430, 
     1680,  6650,  1680, 24500,  1680, 24570, 24640, 24710, 24780, 24850, 
    24920, 24990, 25060, 25130,  1680,  1680, 25200, 25270,  1680, 25340, 
    25410, 25480, 25550, 25620, 25690, 25760, 25830,  1680, 25900, 25970, 
    26040,  1680, 26110, 26180, 26250, 26320, 26390, 26460, 10990, 26530, 
    26600,  1680, 26670,  1680, 26740, 26810, 26880,  1680, 26950,  1680, 
     1680,  1680,  1680, 27020,  1680,  1680,  1680,  1680, 27090,  1680, 
    27160, 27230, 27300, 27370,  1680,  1680, 27440, 27510, 27580,  1680, 
     1680, 27650, 27720, 27790,  1680, 27860, 27930, 28000, 28070, 28140, 
    28210, 28280, 28350,  1680, 28420, 28490, 28560, 28630, 28700,  1680, 
    28770, 28840, 28910,  1680, 28980,  1680, 29050,  1680, 29120, 29190, 
     1680,  1680,  1680, 29260,  1680,  1680, 29330, 29400,  1680,  1680, 
    29470, 29540, 29610,  1680,  1680, 29680, 29750,  1680, 29820, 29890, 
     1680, 29960, 30030,  1680, 30100, 30170,  1680, 30240, 30310,  1680, 
    30380, 30450, 30520,  1680
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\4\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\40\1\41\1\40"+
    "\1\37\1\42\2\43\1\44\1\37\1\45\1\46\1\47"+
    "\1\50\1\4\1\51\2\37\1\52\1\53\2\37\1\54"+
    "\1\55\1\56\1\57\1\37\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\3\37\1\70\2\37\2\4"+
    "\1\71\1\7\1\10\1\11\1\12\1\13\1\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\40\1\41\1\40\1\37\1\42"+
    "\2\43\1\44\1\37\1\45\1\46\1\47\1\50\1\4"+
    "\1\51\2\37\1\52\1\53\2\37\1\54\1\55\1\56"+
    "\1\57\1\37\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\3\37\1\70\2\37\2\72\1\73\5\72"+
    "\1\74\1\75\30\72\1\76\2\43\41\72\2\4\1\77"+
    "\5\0\1\4\13\0\16\4\4\0\4\4\1\0\1\4"+
    "\1\0\3\4\1\0\2\4\1\0\10\4\4\0\6\4"+
    "\2\100\1\101\5\102\1\4\1\0\12\102\2\100\1\103"+
    "\1\104\2\100\1\105\7\100\1\106\2\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\1\107"+
    "\1\100\1\110\1\100\1\111\3\100\4\102\6\100\2\0"+
    "\1\112\106\0\1\113\213\0\1\114\5\0\1\115\42\0"+
    "\1\116\34\0\1\117\102\0\2\120\1\121\5\120\1\122"+
    "\2\120\1\123\27\120\2\0\41\120\3\0\1\124\11\0"+
    "\1\125\73\0\1\126\13\0\1\127\70\0\1\130\1\131"+
    "\14\0\1\132\70\0\1\133\105\0\1\134\13\0\1\135"+
    "\3\0\1\136\62\0\2\4\1\77\5\0\1\4\13\0"+
    "\1\37\1\137\1\37\1\140\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\4\37\1\141\1\142\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\143\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\7\37\1\144\6\37\4\0"+
    "\2\37\1\145\1\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\6\37\1\146\7\37\4\0\2\37\1\147"+
    "\1\37\1\0\1\37\1\0\2\37\1\150\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\151\3\37\1\152\1\153\7\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\7\37\1\154\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\2\37\1\155\4\37\1\156\6\37\4\0\2\37"+
    "\1\157\1\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\7\37\1\160\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\161\15\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\162"+
    "\7\37\4\0\3\37\1\163\1\164\1\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\165\1\166\5\0\1\165\13\0\2\165\1\167\1\170"+
    "\2\165\1\171\2\165\4\40\1\165\4\0\4\165\1\0"+
    "\1\165\1\0\1\171\1\167\1\165\1\0\1\170\1\165"+
    "\1\172\10\165\4\0\10\165\1\166\5\0\1\165\13\0"+
    "\2\165\1\167\1\170\2\165\1\171\2\165\1\173\3\174"+
    "\1\165\4\0\1\175\3\165\1\0\1\165\1\0\1\171"+
    "\1\167\1\175\1\0\1\170\1\165\1\172\10\165\4\0"+
    "\6\165\42\0\1\42\2\43\103\0\3\43\44\0\1\176"+
    "\102\0\2\4\1\77\5\0\1\4\13\0\1\37\1\177"+
    "\14\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\200\6\37\1\201\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\3\37\1\202\1\37\1\203"+
    "\10\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\7\37\1\204\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\205\6\37\1\206"+
    "\4\0\6\37\2\50\1\207\5\50\1\210\32\50\2\0"+
    "\5\50\1\211\33\50\3\0\1\212\102\0\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\7\37\1\213\4\0"+
    "\6\37\3\0\1\214\54\0\1\215\62\0\4\216\45\0"+
    "\2\4\1\77\5\0\1\4\13\0\4\37\1\217\11\37"+
    "\4\0\2\37\1\220\1\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\5\37\1\221\1\222\7\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\7\37\1\223\4\0\4\37\1\224\1\37\2\4\1\77"+
    "\5\0\1\4\13\0\3\37\1\225\12\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\7\37"+
    "\1\226\4\0\5\37\1\227\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\230\1\231\13\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\7\37\1\232\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\2\37\1\233\13\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\37\1\234\14\37"+
    "\4\0\3\37\1\235\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\4\37\1\236\3\37\4\0\6\37\3\0"+
    "\1\237\73\0\1\240\6\0\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\1\37\1\241\6\37\4\0\4\37"+
    "\1\242\1\37\2\0\1\243\103\0\2\72\1\73\5\72"+
    "\1\74\1\244\31\72\2\0\43\72\1\245\5\72\1\74"+
    "\1\244\31\72\2\0\43\72\1\73\5\72\1\74\1\244"+
    "\31\72\1\246\44\72\1\73\5\72\1\74\1\115\31\72"+
    "\2\0\7\72\1\247\33\72\1\73\5\72\1\74\1\244"+
    "\30\72\1\76\2\43\41\72\2\0\1\250\103\0\2\100"+
    "\1\101\5\102\1\4\1\0\12\102\16\100\3\0\1\102"+
    "\4\100\1\102\1\100\1\102\3\100\1\102\2\100\1\102"+
    "\10\100\4\102\6\100\2\102\1\251\5\102\2\0\30\102"+
    "\3\0\51\102\2\0\30\102\3\0\41\102\2\100\1\101"+
    "\5\102\1\4\1\0\12\102\16\100\3\0\1\102\2\100"+
    "\1\252\1\100\1\102\1\100\1\102\3\100\1\102\2\100"+
    "\1\102\10\100\4\102\10\100\1\101\5\102\1\4\1\0"+
    "\12\102\1\100\1\253\4\100\1\254\7\100\3\0\1\102"+
    "\2\100\1\255\1\100\1\102\1\100\1\102\3\100\1\102"+
    "\2\100\1\102\10\100\4\102\10\100\1\101\5\102\1\4"+
    "\1\0\12\102\16\100\3\0\1\102\4\100\1\102\1\100"+
    "\1\102\3\100\1\102\2\100\1\102\1\256\7\100\4\102"+
    "\6\100\10\102\2\0\14\102\1\257\1\260\2\102\1\261"+
    "\7\102\1\106\2\0\17\102\1\262\1\102\1\263\1\102"+
    "\1\264\15\102\2\100\1\101\5\102\1\4\1\0\12\102"+
    "\4\100\1\265\11\100\3\0\1\102\2\100\1\266\1\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\10\100"+
    "\4\102\10\100\1\101\5\102\1\4\1\0\12\102\3\100"+
    "\1\267\12\100\3\0\1\102\4\100\1\102\1\100\1\102"+
    "\3\100\1\102\2\100\1\102\10\100\4\102\10\100\1\101"+
    "\5\102\1\4\1\0\12\102\1\100\1\270\14\100\3\0"+
    "\1\102\4\100\1\102\1\100\1\102\3\100\1\102\2\100"+
    "\1\102\10\100\4\102\6\100\3\0\1\5\1\0\1\10"+
    "\1\0\1\12\1\0\1\4\1\0\1\15\1\0\1\17"+
    "\1\0\1\21\1\0\1\23\1\0\1\25\62\0\43\115"+
    "\2\0\41\115\54\271\1\272\31\271\2\273\1\274\5\273"+
    "\1\275\2\273\1\276\27\273\2\0\43\273\1\277\5\273"+
    "\1\275\2\273\1\276\27\273\2\0\43\273\1\300\5\273"+
    "\1\120\2\273\1\120\4\273\1\301\3\273\2\120\2\273"+
    "\2\120\4\273\1\302\2\303\2\273\2\0\1\273\1\301"+
    "\4\120\4\273\1\301\26\273\3\0\1\304\105\0\1\305"+
    "\104\0\1\306\103\0\2\4\1\77\5\0\1\4\13\0"+
    "\2\37\1\307\13\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\5\37\1\310"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\6\37"+
    "\1\311\1\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\312\14\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\313\7\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\4\37\1\314\3\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\315\15\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\316\4\37\1\317"+
    "\2\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\320\7\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\7\37\1\321\6\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\322"+
    "\7\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\7\37\1\323\6\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\2\37\1\324\13\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\325\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\4\37\1\326\3\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\327"+
    "\7\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\6\37\1\330\7\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\7\37\1\331"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\37"+
    "\1\332\14\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\1\333\15\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\6\37\1\334\1\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\2\37\1\335\5\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\2\37\1\336\1\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\37\1\337\3\37\1\340\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\5\37\1\341\2\37\4\0\2\37\1\342"+
    "\3\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\1\343\7\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\7\37\1\344\4\0\6\37\2\165"+
    "\1\166\5\0\1\165\13\0\16\165\4\0\4\165\1\0"+
    "\1\165\1\0\3\165\1\0\13\165\4\0\6\165\2\0"+
    "\1\345\103\0\2\165\1\166\5\0\1\165\13\0\6\165"+
    "\1\346\7\165\4\0\4\165\1\0\1\165\1\0\1\346"+
    "\2\165\1\0\13\165\4\0\10\165\1\166\5\0\1\165"+
    "\12\0\1\347\11\165\4\350\1\165\4\0\4\165\1\0"+
    "\1\165\1\0\3\165\1\347\13\165\4\0\10\165\1\166"+
    "\5\0\1\165\13\0\2\165\1\346\13\165\4\0\4\165"+
    "\1\0\1\165\1\0\1\165\1\346\1\165\1\0\13\165"+
    "\4\0\10\165\1\166\5\0\1\165\13\0\3\165\1\170"+
    "\1\351\1\165\1\351\2\165\4\172\1\165\4\0\4\165"+
    "\1\0\1\165\1\0\1\351\2\165\1\0\1\170\1\351"+
    "\11\165\4\0\10\165\1\166\5\0\1\165\13\0\3\165"+
    "\1\170\5\165\4\173\1\165\4\0\4\165\1\0\1\165"+
    "\1\0\3\165\1\0\1\170\1\165\1\172\10\165\4\0"+
    "\10\165\1\166\5\0\1\165\13\0\2\165\1\352\1\170"+
    "\2\165\1\353\2\165\1\173\3\174\1\165\4\0\4\165"+
    "\1\0\1\165\1\0\1\353\1\352\1\165\1\0\1\170"+
    "\1\165\1\172\10\165\4\0\10\165\1\166\5\0\1\165"+
    "\13\0\3\165\3\354\2\165\5\354\1\165\4\0\1\165"+
    "\1\354\2\165\1\0\1\165\1\0\3\165\1\0\2\354"+
    "\2\165\2\354\5\165\4\0\6\165\2\4\1\77\5\0"+
    "\1\4\13\0\3\37\1\355\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\1\356\15\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\7\37\1\357\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\3\37\1\360\2\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\6\37\1\361\1\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\362\15\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\37"+
    "\1\363\14\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\6\37\1\364\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\365"+
    "\7\37\4\0\6\37\2\50\1\366\5\50\1\367\32\50"+
    "\2\0\5\50\1\211\33\50\2\370\1\50\5\370\1\50"+
    "\2\370\1\50\4\370\1\371\3\370\2\50\2\370\2\50"+
    "\4\370\3\50\2\370\1\372\1\373\1\370\1\371\3\50"+
    "\1\373\4\370\1\371\26\370\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\374\14\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\27\0\1\375\1\376\1\0\1\376\2\0\4\216\14\0"+
    "\1\376\3\0\1\375\1\376\23\0\2\4\1\77\5\0"+
    "\1\4\13\0\1\377\5\37\1\u0100\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\u0101"+
    "\6\37\1\u0102\6\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u0103\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\2\37\1\u0104\1\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\6\37\1\u0105\1\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\5\37\1\u0106"+
    "\10\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\4\37\1\u0107\1\37\1\u0108\7\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\2\37\1\u0109\13\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\2\37\1\u010a"+
    "\1\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\u010b\6\37\1\u010c\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\1\37\1\u010d"+
    "\2\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\u010e\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\1\u010f\15\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\3\37\1\u0110\4\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\3\37\1\u0111\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\3\37\1\u0112"+
    "\12\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\4\37\1\u0113"+
    "\1\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\1\u0114\7\37\4\0\6\37\3\0\1\4\1\0\1\10"+
    "\1\0\1\12\1\0\1\4\1\0\1\15\1\0\1\17"+
    "\1\0\1\21\1\0\1\23\1\0\1\25\62\0\2\72"+
    "\1\73\5\72\1\74\1\0\31\72\2\0\7\72\1\0"+
    "\33\72\1\245\5\72\2\74\31\72\2\0\43\72\1\73"+
    "\5\72\1\74\1\244\31\72\1\0\42\72\54\247\1\u0115"+
    "\31\247\3\0\1\4\5\0\1\4\74\0\3\102\1\100"+
    "\4\102\1\0\1\4\30\102\3\0\41\102\2\100\1\101"+
    "\5\102\1\4\1\0\12\102\16\100\3\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\2\100"+
    "\1\u0116\5\100\4\102\10\100\1\101\5\102\1\4\1\0"+
    "\12\102\1\100\1\u0117\14\100\3\0\1\102\4\100\1\102"+
    "\1\100\1\102\3\100\1\102\2\100\1\102\10\100\4\102"+
    "\10\100\1\101\5\102\1\4\1\0\12\102\7\100\1\u0118"+
    "\6\100\3\0\1\102\4\100\1\102\1\100\1\102\3\100"+
    "\1\102\2\100\1\102\1\u0119\7\100\4\102\10\100\1\101"+
    "\5\102\1\4\1\0\12\102\16\100\3\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\2\100"+
    "\1\u011a\5\100\4\102\10\100\1\101\5\102\1\4\1\0"+
    "\12\102\16\100\3\0\1\102\2\100\1\u0118\1\100\1\102"+
    "\1\100\1\102\3\100\1\102\2\100\1\102\10\100\4\102"+
    "\6\100\10\102\2\0\30\102\3\0\3\102\1\u011b\45\102"+
    "\2\0\13\102\1\u011c\4\102\1\u011d\7\102\3\0\3\102"+
    "\1\u011e\45\102\2\0\30\102\3\0\17\102\1\u011f\31\102"+
    "\2\0\16\102\1\265\11\102\3\0\3\102\1\u0120\45\102"+
    "\2\0\15\102\1\u0121\12\102\3\0\51\102\2\0\13\102"+
    "\1\u0122\14\102\3\0\41\102\2\265\1\u0123\5\265\1\u0124"+
    "\1\u0125\31\265\2\0\41\265\2\100\1\101\5\102\1\4"+
    "\1\0\12\102\16\100\3\0\1\102\4\100\1\102\1\100"+
    "\1\102\3\100\1\102\2\100\1\102\1\100\1\u0126\6\100"+
    "\4\102\10\100\1\101\5\102\1\4\1\0\12\102\4\100"+
    "\1\105\11\100\3\0\1\102\4\100\1\102\1\100\1\102"+
    "\3\100\1\102\2\100\1\102\10\100\4\102\10\100\1\101"+
    "\5\102\1\4\1\0\12\102\5\100\1\u0127\10\100\3\0"+
    "\1\102\4\100\1\102\1\100\1\102\3\100\1\102\2\100"+
    "\1\102\10\100\4\102\6\100\54\271\1\u0128\31\271\11\u0129"+
    "\1\u012a\42\u0129\1\272\31\u0129\2\273\1\274\5\273\1\275"+
    "\2\273\1\123\27\273\2\0\43\273\1\u012b\5\273\1\275"+
    "\2\273\1\123\27\273\2\0\104\273\2\0\43\273\1\u012b"+
    "\1\120\1\273\1\120\1\273\1\120\1\275\1\u012c\1\273"+
    "\1\u012d\1\273\1\120\1\273\1\120\1\273\1\120\1\273"+
    "\1\120\17\273\2\0\43\273\1\u012e\5\273\1\275\2\273"+
    "\1\276\27\273\2\0\43\273\1\274\5\273\1\275\2\273"+
    "\1\123\13\273\3\u012f\2\273\5\u012f\2\273\2\0\2\273"+
    "\1\u012f\11\273\2\u012f\2\273\2\u012f\21\273\1\274\5\273"+
    "\1\275\2\273\1\276\22\273\3\120\2\273\2\0\43\273"+
    "\1\274\5\273\1\275\2\273\1\276\22\273\3\302\2\273"+
    "\2\0\41\273\21\0\1\132\64\0\2\4\1\77\5\0"+
    "\1\4\13\0\3\37\1\u0130\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\4\37\1\u0131\3\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\7\37\1\u0132\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\7\37\1\u0133\6\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\3\37\1\u0134\12\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\2\37\1\u0135\13\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\2\37\1\u0136\1\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\u0137"+
    "\7\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\2\37\1\u0138\1\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\1\u0139\7\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\7\37\1\u013a\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\3\37\1\u013b\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\6\37\1\u013c\1\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\3\37\1\u013d\12\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\6\37\1\u013e"+
    "\7\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\7\37\1\u013f\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\3\37\1\u0140\12\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\7\37"+
    "\1\307\6\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\5\37\1\u0141\10\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\7\37\1\u0142\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\3\37\1\u0143\4\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\5\37\1\u0144\2\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\2\37\1\u0145\13\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\1\u0146\15\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\2\37\1\u0147\1\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u0148\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\u0149\15\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\37\1\u014a\14\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\3\0\1\165\5\0\1\165\131\0"+
    "\4\u014b\45\0\2\165\1\166\5\0\1\165\13\0\4\165"+
    "\1\351\1\165\1\351\2\165\4\350\1\165\4\0\4\165"+
    "\1\0\1\165\1\0\1\351\2\165\1\0\1\165\1\351"+
    "\11\165\4\0\10\165\1\166\5\0\1\165\13\0\6\165"+
    "\1\u014c\7\165\4\0\4\165\1\0\1\165\1\0\1\u014c"+
    "\2\165\1\0\13\165\4\0\10\165\1\166\5\0\1\165"+
    "\13\0\2\165\1\u014c\13\165\4\0\4\165\1\0\1\165"+
    "\1\0\1\165\1\u014c\1\165\1\0\13\165\4\0\10\165"+
    "\1\166\5\0\1\165\13\0\2\165\1\u014d\3\354\1\u014e"+
    "\1\165\5\354\1\165\4\0\1\165\1\354\2\165\1\0"+
    "\1\165\1\0\1\u014e\1\u014d\1\165\1\0\2\354\2\165"+
    "\2\354\5\165\4\0\6\165\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u014f\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\5\37\1\u0150\10\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\7\37\1\u0151\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\6\37\1\u0152\7\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\3\37\1\u0153"+
    "\12\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\3\37\1\u0154\4\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\1\u0155\15\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u0156\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\2\37"+
    "\1\u0157\5\37\4\0\6\37\2\50\1\u0158\5\50\1\367"+
    "\1\210\31\50\2\0\5\50\1\211\33\50\2\370\1\50"+
    "\5\370\1\50\2\370\1\50\4\370\1\371\3\370\2\50"+
    "\2\370\2\50\4\370\3\50\2\370\2\0\1\370\1\371"+
    "\3\50\1\373\4\370\1\371\71\370\2\0\5\370\1\u0159"+
    "\62\370\3\u015a\2\370\5\u015a\2\370\2\0\2\370\1\u015a"+
    "\2\370\1\u0159\6\370\2\u015a\2\370\2\u015a\17\370\2\373"+
    "\1\u015b\5\373\1\u015c\32\373\1\0\6\373\1\211\35\373"+
    "\1\u015b\5\373\1\u015c\32\373\2\0\5\373\1\211\33\373"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\3\37"+
    "\1\u015d\4\37\4\0\6\37\23\0\1\347\11\0\4\u014b"+
    "\17\0\1\347\25\0\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\u015e\7\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\37\1\u015f\6\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\3\37"+
    "\1\u0160\12\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\7\37\1\u0161\6\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\u0162"+
    "\6\37\1\u0163\6\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\4\37\1\u0164"+
    "\3\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\37\1\u0165\14\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u0166\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u0167\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\1\37\1\u0168"+
    "\2\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\5\37\1\u0169\10\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\3\37\1\u016a"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\u016b"+
    "\15\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\6\37\1\u016c\7\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\7\37\1\u016d\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u016e\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u016f\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\u0170\14\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\37\1\u0171\14\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u0172\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\6\37\1\u0173\7\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\11\247\1\u0174\42\247\1\u0115"+
    "\31\247\2\100\1\101\5\102\1\4\1\0\12\102\3\100"+
    "\1\u0119\12\100\3\0\1\102\4\100\1\102\1\100\1\102"+
    "\3\100\1\102\2\100\1\102\10\100\4\102\10\100\1\101"+
    "\5\102\1\4\1\0\12\102\16\100\3\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\7\100"+
    "\1\u0175\4\102\10\100\1\101\5\102\1\4\1\0\12\102"+
    "\3\100\1\265\12\100\3\0\1\102\4\100\1\102\1\100"+
    "\1\102\3\100\1\102\2\100\1\102\10\100\4\102\10\100"+
    "\1\101\5\102\1\4\1\0\12\102\4\100\1\265\11\100"+
    "\3\0\1\102\4\100\1\102\1\100\1\102\3\100\1\102"+
    "\2\100\1\102\10\100\4\102\10\100\1\101\5\102\1\4"+
    "\1\0\12\102\16\100\3\0\1\102\4\100\1\102\1\100"+
    "\1\102\3\100\1\102\2\100\1\102\1\u0119\7\100\4\102"+
    "\6\100\10\102\2\0\30\102\3\0\21\102\1\u0176\27\102"+
    "\2\0\13\102\1\u0177\14\102\3\0\51\102\2\0\21\102"+
    "\1\u0178\6\102\3\0\17\102\1\u0179\31\102\2\0\30\102"+
    "\3\0\21\102\1\u017a\27\102\2\0\30\102\3\0\3\102"+
    "\1\u0178\45\102\2\0\30\102\3\0\20\102\1\u017b\30\102"+
    "\2\0\16\102\1\261\11\102\3\0\51\102\2\0\17\102"+
    "\1\u017c\10\102\3\0\41\102\2\265\1\u017d\5\265\1\u0124"+
    "\1\u0125\31\265\2\0\43\265\1\u0123\5\265\1\u0124\1\u0125"+
    "\31\265\1\u017e\44\265\1\u0123\5\265\1\u0124\1\0\31\265"+
    "\2\0\7\265\1\0\31\265\2\100\1\101\5\102\1\4"+
    "\1\0\12\102\6\100\1\u017f\7\100\3\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\10\100"+
    "\4\102\10\100\1\101\5\102\1\4\1\0\12\102\16\100"+
    "\3\0\1\102\4\100\1\102\1\100\1\102\3\100\1\102"+
    "\2\100\1\102\5\100\1\u0180\2\100\4\102\6\100\11\271"+
    "\1\u0181\42\271\1\u0128\31\271\54\u0129\1\272\31\u0129\2\273"+
    "\1\u012b\5\273\1\275\1\u0182\1\273\1\123\27\273\2\0"+
    "\43\273\1\u0183\5\273\1\u0184\2\273\1\120\4\273\1\301"+
    "\3\273\2\120\2\273\2\120\4\273\1\302\2\303\2\273"+
    "\2\0\1\273\1\301\4\120\4\273\1\301\26\273\13\0"+
    "\1\276\72\0\2\273\1\u012b\5\273\1\275\1\120\1\273"+
    "\1\123\27\273\2\0\43\273\1\274\5\273\1\275\2\273"+
    "\1\123\13\273\3\120\2\273\5\120\2\273\2\0\2\273"+
    "\1\120\11\273\2\120\2\273\2\120\17\273\2\4\1\77"+
    "\5\0\1\4\13\0\6\37\1\u0185\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\3\37\1\u0186\2\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\2\37\1\u0187\1\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\u0188"+
    "\1\37\1\u0189\5\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\37\1\u018a\14\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\1\u018b\15\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\7\37\1\u018c\6\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\5\37"+
    "\1\u018d\2\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\5\37\1\u018e\2\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\2\37"+
    "\1\u018f\1\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\37\1\u0190\14\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\u0191"+
    "\7\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\37\1\u0192\14\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\2\37\1\u0193"+
    "\1\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\u0194\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\3\37\1\u0195\12\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\1\37\1\u0196\6\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\u0197\7\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\3\37\1\u0198"+
    "\12\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\7\37\1\u0199\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\37"+
    "\1\u019a\6\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\1\u019b\15\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\30\0"+
    "\1\376\1\0\1\376\2\0\4\u014b\14\0\1\376\4\0"+
    "\1\376\23\0\2\165\1\166\5\0\1\165\13\0\6\165"+
    "\1\u019c\7\165\4\0\4\165\1\0\1\165\1\0\1\u019c"+
    "\2\165\1\0\13\165\4\0\10\165\1\166\5\0\1\165"+
    "\13\0\2\165\1\u019c\13\165\4\0\4\165\1\0\1\165"+
    "\1\0\1\165\1\u019c\1\165\1\0\13\165\4\0\6\165"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\1\37\1\u019d\4\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\2\37\1\u019e\1\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\37\1\u019f\14\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\7\37\1\u01a0\6\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u01a1\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\2\37\1\u01a2\13\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\u01a3\15\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\50\1\u0158\5\50\2\367\31\50"+
    "\2\0\5\50\1\211\33\50\27\370\3\50\2\370\5\50"+
    "\2\370\2\0\2\370\1\50\2\370\1\u0159\6\370\2\50"+
    "\2\370\2\50\17\370\2\373\1\u01a4\5\373\1\u01a5\32\373"+
    "\2\0\5\373\1\211\33\373\2\0\1\373\5\0\1\373"+
    "\2\0\1\373\4\0\1\u01a6\3\0\2\373\2\0\2\373"+
    "\4\0\3\373\2\0\1\372\1\373\1\0\1\u01a6\4\373"+
    "\4\0\1\u01a6\26\0\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u01a7\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\2\37\1\u01a8"+
    "\1\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\4\37\1\u01a9\1\37\2\4"+
    "\1\77\5\0\1\4\13\0\7\37\1\u01aa\6\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\u01ab\7\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\1\u01ac\15\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\6\37\1\u01ad"+
    "\7\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\2\37\1\u01ae\13\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\1\u01af\15\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\6\37\1\u01b0\7\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\6\37"+
    "\1\u01b1\1\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u01b2\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u01b3\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\1\u01b4\7\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\1\37\1\u01b5"+
    "\2\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\1\u01b6\5\37\2\4\1\77"+
    "\5\0\1\4\13\0\6\37\1\u01b7\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\5\37"+
    "\1\u01b8\10\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\1\37\1\u01b9\14\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\3\37"+
    "\1\u01ba\12\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\100\1\101"+
    "\5\102\1\4\1\0\12\102\1\100\1\265\14\100\3\0"+
    "\1\102\4\100\1\102\1\100\1\102\3\100\1\102\2\100"+
    "\1\102\10\100\4\102\6\100\10\102\2\0\15\102\1\u0179"+
    "\12\102\3\0\51\102\2\0\30\102\3\0\26\102\1\u01bb"+
    "\22\102\2\0\15\102\1\265\12\102\3\0\51\102\2\0"+
    "\16\102\1\265\11\102\3\0\51\102\2\0\30\102\3\0"+
    "\17\102\1\u0179\31\102\2\0\20\102\1\u01bc\7\102\3\0"+
    "\51\102\2\0\30\102\3\0\24\102\1\u01bd\14\102\2\265"+
    "\1\u017d\5\265\2\u0124\31\265\2\0\43\265\1\u0123\5\265"+
    "\1\u0124\1\u0125\31\265\1\0\42\265\2\100\1\101\5\102"+
    "\1\4\1\0\12\102\2\100\1\u01be\13\100\3\0\1\102"+
    "\4\100\1\102\1\100\1\102\3\100\1\102\2\100\1\102"+
    "\10\100\4\102\10\100\1\101\5\102\1\4\1\0\12\102"+
    "\16\100\3\0\1\102\4\100\1\102\1\100\1\102\3\100"+
    "\1\102\2\100\1\102\6\100\1\u01bf\1\100\4\102\6\100"+
    "\2\273\1\274\5\273\1\u0182\32\273\2\0\43\273\1\u01c0"+
    "\5\273\1\275\2\273\1\276\27\273\2\0\43\273\1\274"+
    "\5\273\1\u0182\2\273\1\u01c1\27\273\2\0\41\273\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u01c2\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\5\37\1\u01c3\10\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\2\37\1\u01c4"+
    "\5\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u01c5\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\2\37\1\u01c6"+
    "\1\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u01c7\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\u01c8\15\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\2\37\1\u01c9\1\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\2\37\1\u01ca\1\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\1\37\1\u01cb\6\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\1\u01cc\15\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\16\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\2\37\1\u01cd\5\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\1\u01ce\5\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\u01cf\15\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\37\1\u01d0\6\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\2\37\1\u01d1"+
    "\5\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\4\37\1\u01d2\11\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\10\37\4\0"+
    "\4\37\1\u01d3\1\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\2\37\1\u01d4\5\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\4\37\1\u01d5"+
    "\3\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\1\u01d6\5\37\2\4\1\77"+
    "\5\0\1\4\13\0\5\37\1\u01d7\10\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\1\u01d8\7\37\4\0\6\37\2\373\1\u01d9\5\373"+
    "\1\u01a5\1\u015c\31\373\2\0\5\373\1\211\33\373\2\0"+
    "\1\373\5\0\1\373\2\0\1\373\4\0\1\u01a6\3\0"+
    "\2\373\2\0\2\373\4\0\3\373\5\0\1\u01a6\4\373"+
    "\4\0\1\u01a6\55\0\3\u01da\2\0\5\u01da\6\0\1\u01da"+
    "\11\0\2\u01da\2\0\2\u01da\17\0\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\1\u01db\5\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u01dc\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\2\37\1\u01dd\1\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\3\37"+
    "\1\u01de\4\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\6\37\1\u01df\7\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u01e0\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\3\37\1\u01e1\12\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\u01e2"+
    "\7\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\u01e3\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\37\1\u01e4\6\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\1\37\1\u01e5\6\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\6\37\1\u01e6\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\16\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\7\37\1\u01e7\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\u01e8\15\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\3\37"+
    "\1\u01e9\4\37\4\0\6\37\10\102\2\0\13\102\1\265"+
    "\14\102\3\0\51\102\2\0\14\102\1\u01ea\13\102\3\0"+
    "\51\102\2\0\30\102\3\0\25\102\1\u01eb\13\102\2\100"+
    "\1\101\5\102\1\4\1\0\12\102\16\100\3\0\1\102"+
    "\4\100\1\102\1\100\1\102\3\100\1\102\2\100\1\102"+
    "\2\100\1\u0118\5\100\4\102\10\100\1\101\5\102\1\4"+
    "\1\0\12\102\5\100\1\265\10\100\3\0\1\102\4\100"+
    "\1\102\1\100\1\102\3\100\1\102\2\100\1\102\10\100"+
    "\4\102\6\100\2\273\1\u012b\5\273\1\275\1\u0184\1\273"+
    "\1\123\27\273\2\0\41\273\2\4\1\77\5\0\1\4"+
    "\13\0\1\u01ec\15\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\6\37\1\u01ed"+
    "\1\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\4\37\1\u01ee\11\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\37\1\u01ef\14\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u01f0\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\3\37\1\u01f1\12\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\u0192\7\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\3\37\1\u01f2\4\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\5\37"+
    "\1\u01f3\10\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\6\37\1\u01f4\7\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\6\37"+
    "\1\u01f5\7\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\373\1\u01d9"+
    "\5\373\2\u01a5\31\373\2\0\5\373\1\211\33\373\27\0"+
    "\3\373\2\0\5\373\6\0\1\373\11\0\2\373\2\0"+
    "\2\373\17\0\2\4\1\77\5\0\1\4\13\0\2\37"+
    "\1\u01f6\13\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\16\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\1\37\1\u01f7\6\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\u01f8"+
    "\15\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\16\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\1\37\1\u01f9\6\37\4\0"+
    "\6\37\2\4\1\77\5\0\1\4\13\0\3\37\1\u01fa"+
    "\12\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\u01fb\15\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\3\37\1\u01fc\12\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\5\37\1\u01fd\10\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\16\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\7\37"+
    "\1\u01fe\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\u01ff\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\10\102\2\0"+
    "\30\102\3\0\21\102\1\u0178\27\102\2\0\17\102\1\265"+
    "\10\102\3\0\41\102\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u0200\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\3\37\1\u0201\12\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\4\37\1\u0202\3\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\37\1\u0203\14\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\2\37\1\u0204\5\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\1\37\1\u0205"+
    "\6\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\37\1\u0206\6\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\3\37\1\u0207\12\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u0208\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u0209\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\3\37\1\u020a\4\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\3\37\1\u020b\12\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\2\37\1\u020c\5\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\37\1\u020d\14\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\37\1\u020e\14\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u020f\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u0210\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\7\37\1\u0211\6\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\37\1\u0212\6\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\16\37\4\0\4\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\2\37\1\u0213"+
    "\5\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\3\37\1\u0214\12\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\7\37\1\u0215\6\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\1\u0216\15\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\10\37\4\0\6\37\2\4\1\77"+
    "\5\0\1\4\13\0\5\37\1\u0217\10\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37\2\4\1\77\5\0\1\4\13\0\1\u0218"+
    "\15\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\10\37\4\0\6\37\2\4\1\77\5\0"+
    "\1\4\13\0\1\u0219\15\37\4\0\4\37\1\0\1\37"+
    "\1\0\3\37\1\0\2\37\1\0\10\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\7\37\1\u021a\6\37"+
    "\4\0\4\37\1\0\1\37\1\0\3\37\1\0\2\37"+
    "\1\0\10\37\4\0\6\37\2\4\1\77\5\0\1\4"+
    "\13\0\16\37\4\0\4\37\1\0\1\37\1\0\3\37"+
    "\1\0\2\37\1\0\3\37\1\u021b\4\37\4\0\6\37"+
    "\2\4\1\77\5\0\1\4\13\0\1\u021c\15\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\16\37\4\0\4\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\37\1\u021d\6\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\5\37\1\u021e\10\37\4\0"+
    "\4\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0"+
    "\10\37\4\0\6\37\2\4\1\77\5\0\1\4\13\0"+
    "\7\37\1\u021f\6\37\4\0\4\37\1\0\1\37\1\0"+
    "\3\37\1\0\2\37\1\0\10\37\4\0\6\37\2\4"+
    "\1\77\5\0\1\4\13\0\1\u0220\15\37\4\0\4\37"+
    "\1\0\1\37\1\0\3\37\1\0\2\37\1\0\10\37"+
    "\4\0\6\37";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  1,  1,  1,  1,  1,  9,  9,  9,  9,  1,  1,  1,  9,  1, 
     9,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  0,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  9,  1,  1,  9,  1, 
     1,  0,  9,  9,  1,  9,  1,  0,  9,  9,  9,  9,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  9,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     1,  1,  0,  0,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  1,  1, 
     1,  1,  1,  9,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }

    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }                   
            } else {
                in = System.in;
            }       
            CLexer shredder = new CLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != CToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    } 

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[30590];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 34: 
          {  
    nextState = YYINITIAL;
    lastToken = CToken.WHITE_SPACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return (t);
 }
        case 545: break;
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 36: 
        case 37: 
        case 38: 
        case 41: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 55: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 138: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 156: 
        case 157: 
        case 160: 
        case 161: 
        case 198: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 218: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 236: 
        case 237: 
        case 238: 
        case 240: 
        case 242: 
        case 243: 
        case 244: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 304: 
        case 305: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 322: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 334: 
        case 335: 
        case 336: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 348: 
        case 349: 
        case 350: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 388: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 397: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 413: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 422: 
        case 423: 
        case 426: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 438: 
        case 439: 
        case 440: 
        case 449: 
        case 450: 
        case 452: 
        case 454: 
        case 455: 
        case 456: 
        case 458: 
        case 468: 
        case 470: 
        case 471: 
        case 476: 
        case 477: 
        case 478: 
        case 481: 
        case 482: 
        case 483: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 491: 
        case 492: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 500: 
        case 501: 
        case 502: 
        case 504: 
        case 506: 
        case 508: 
        case 509: 
        case 513: 
        case 516: 
        case 517: 
        case 520: 
        case 521: 
        case 522: 
        case 525: 
        case 526: 
        case 528: 
        case 529: 
        case 531: 
        case 532: 
        case 534: 
        case 535: 
        case 537: 
        case 538: 
        case 540: 
        case 541: 
        case 542: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.IDENTIFIER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 546: break;
        case 140: 
          {  
    lastToken = CToken.OPERATOR_INCREMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
 }
        case 547: break;
        case 79: 
        case 80: 
        case 191: 
        case 193: 
        case 194: 
        case 300: 
        case 386: 
        case 387: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_UNCLOSED_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 548: break;
        case 91: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SUBTRACT_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 549: break;
        case 137: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MULTIPLY_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 550: break;
        case 13: 
        case 186: 
        case 187: 
        case 190: 
        case 192: 
        case 298: 
        case 299: 
        case 301: 
        case 302: 
        case 385: 
        case 447: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_UNCLOSED_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 551: break;
        case 76: 
          {  
    nextState = YYINITIAL;
    lastToken = CToken.COMMENT_END_OF_LINE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 552: break;
        case 78: 
        case 474: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_XOR_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 553: break;
        case 83: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LESS_THAN_OR_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 554: break;
        case 136: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 555: break;
        case 158: 
        case 461: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_AND_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 556: break;
        case 196: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_RIGHT_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 557: break;
        case 135: 
        case 246: 
        case 247: 
        case 248: 
        case 345: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_UNCLOSED_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 558: break;
        case 39: 
        case 134: 
        case 245: 
        case 249: 
        case 250: 
        case 343: 
        case 346: 
        case 419: 
        case 472: 
          {  
    /* most of these errors have to be caught down near the end of the file.
     * This way, previous expressions of the same length have precedence.
     * This is really useful for catching anything bad by just allowing it 
     * to slip through the cracks. 
     */ 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_UNCLOSED_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 559: break;
        case 8: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_LPAREN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
     }
        case 560: break;
        case 85: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_GREATER_THAN_OR_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 561: break;
        case 116: 
        case 119: 
        case 122: 
        case 124: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_FLOAT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 562: break;
        case 371: 
          { 
    lastToken = CToken.COMMENT_TRADITIONAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
 }
        case 563: break;
        case 539: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DYNAMIC_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 564: break;
        case 180: 
        case 290: 
        case 291: 
        case 380: 
        case 381: 
          { 
    nextState = PREPROCESSOR;
	lastToken = CToken.PREPROCESSOR_DIRECTIVE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 565: break;
        case 543: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_REINTERPRET_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 566: break;
        case 254: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_INT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 567: break;
        case 239: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_NEW;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 568: break;
        case 74: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 569: break;
        case 53: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_COLON;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 570: break;
        case 52: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_COMMA;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 571: break;
        case 6: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 572: break;
        case 11: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_DIVIDE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 573: break;
        case 92: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_ARROW;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 574: break;
        case 142: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_IF;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 575: break;
        case 149: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DO;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 576: break;
        case 199: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TRY;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 577: break;
        case 217: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_FOR;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 578: break;
        case 219: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_ASM;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 579: break;
        case 42: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_ADD;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 580: break;
        case 35: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MOD;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 581: break;
        case 2: 
        case 57: 
        case 58: 
        case 59: 
        case 61: 
        case 164: 
        case 165: 
          { 
	lastToken = CToken.PREPROCESSOR_DIRECTIVE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return(t);
 }
        case 582: break;
        case 33: 
          {  
    lastToken = CToken.WHITE_SPACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	return (t);
 }
        case 583: break;
        case 4: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 181: 
        case 182: 
        case 183: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 293: 
        case 294: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 382: 
        case 383: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 489: 
        case 490: 
          { 
    nextState = PREPROCESSOR;
	lastToken = CToken.ERROR_MALFORMED_PREPROCESSOR_DIRECTIVE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 584: break;
        case 84: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_LEFT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 585: break;
        case 86: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_RIGHT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 586: break;
        case 89: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LOGICAL_OR;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 587: break;
        case 125: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MOD_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 588: break;
        case 139: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_ADD_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 589: break;
        case 155: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LOGICAL_OR;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 590: break;
        case 159: 
        case 220: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LOGICAL_AND;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 591: break;
        case 303: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_BOOLEAN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 592: break;
        case 3: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_IDENTIFIER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 593: break;
        case 530: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_PROTECTED;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 594: break;
        case 527: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_NAMESPACE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 595: break;
        case 524: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_OPERATOR;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 596: break;
        case 523: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_OVERLOAD;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 597: break;
        case 519: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CONTINUE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 598: break;
        case 518: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_VOLATILE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 599: break;
        case 515: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_UNSIGNED;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 600: break;
        case 514: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_REGISTER;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 601: break;
        case 512: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TYPENAME;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 602: break;
        case 511: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TEMPLATE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 603: break;
        case 459: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_EXPLICIT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 604: break;
        case 297: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.COMMENT_DOCUMENTATION;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 605: break;
        case 54: 
        case 467: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_AND;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 606: break;
        case 19: 
        case 241: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LOGICAL_NOT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 607: break;
        case 12: 
        case 251: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_XOR;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 608: break;
        case 17: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_GREATER_THAN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 609: break;
        case 123: 
        case 233: 
        case 234: 
        case 331: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_INTEGER_OCTAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 610: break;
        case 344: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_STRING;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 611: break;
        case 75: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_DIVIDE_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 612: break;
        case 77: 
        case 166: 
        case 184: 
        case 185: 
        case 276: 
        case 295: 
        case 296: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_UNCLOSED_COMMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 613: break;
        case 82: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.ERROR_MALFORMED_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 614: break;
        case 88: 
        case 437: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_OR_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 615: break;
        case 90: 
        case 469: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_NOT_EQUAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 616: break;
        case 93: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_DECREMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 617: break;
        case 189: 
        case 448: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_CHARACTER;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 618: break;
        case 195: 
          {  
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SHIFT_LEFT_ASSIGN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 619: break;
        case 441: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_WHILE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 620: break;
        case 427: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CONST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 621: break;
        case 425: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CLASS;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 622: break;
        case 424: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CATCH;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 623: break;
        case 412: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_BREAK;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 624: break;
        case 410: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SHORT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 625: break;
        case 403: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_FLOAT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 626: break;
        case 398: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_UNION;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 627: break;
        case 396: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_USING;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 628: break;
        case 389: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_THROW;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 629: break;
        case 364: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_GOTO;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 630: break;
        case 356: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CHAR;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 631: break;
        case 351: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CASE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 632: break;
        case 342: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_VOID;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 633: break;
        case 337: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_BOOL;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 634: break;
        case 323: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_LONG;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 635: break;
        case 321: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_AUTO;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 636: break;
        case 315: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_ENUM;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 637: break;
        case 314: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_ELSE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 638: break;
        case 306: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_THIS;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 639: break;
        case 43: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_PERIOD;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 640: break;
        case 40: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_MULTIPLY;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 641: break;
        case 21: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_SUBTRACT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 642: break;
        case 5: 
        case 56: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_QUESTION;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 643: break;
        case 10: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_RPAREN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 644: break;
        case 14: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_LBRACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 645: break;
        case 16: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_RBRACE;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 646: break;
        case 536: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_STATIC_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 647: break;
        case 533: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_CONST_CAST;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 648: break;
        case 510: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_WCHAR_T;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 649: break;
        case 507: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_MUTABLE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 650: break;
        case 505: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_PRIVATE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 651: break;
        case 503: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DEFAULT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 652: break;
        case 499: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_VIRTUAL;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 653: break;
        case 493: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TYPEDEF;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 654: break;
        case 484: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_PUBLIC;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 655: break;
        case 480: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DOUBLE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 656: break;
        case 479: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_DELETE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 657: break;
        case 475: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_INLINE;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 658: break;
        case 466: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SWITCH;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 659: break;
        case 465: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SIZEOF;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 660: break;
        case 464: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_SIGNED;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 661: break;
        case 463: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_STATIC;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 662: break;
        case 462: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_STRUCT;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 663: break;
        case 460: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_FRIEND;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 664: break;
        case 457: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_EXTERN;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 665: break;
        case 453: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_RETURN;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 666: break;
        case 451: 
          { 
    nextState = MIDDLE_OF_LINE;
	lastToken = CToken.RESERVED_WORD_TYPEID;
	String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
    return(t);
 }
        case 667: break;
        case 384: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.COMMENT_TRADITIONAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 668: break;
        case 235: 
        case 332: 
        case 333: 
        case 411: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_INTEGER_HEXIDECIMAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 669: break;
        case 51: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_SEMICOLON;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 670: break;
        case 31: 
        case 32: 
        case 118: 
        case 120: 
        case 229: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_INTEGER_DECIMAL;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 671: break;
        case 20: 
        case 428: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_COMPLIMENT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 672: break;
        case 9: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_RBRACKET;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 673: break;
        case 7: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.SEPARATOR_LBRACKET;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 674: break;
        case 15: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_LESS_THAN;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 675: break;
        case 18: 
        case 414: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.OPERATOR_BITWISE_OR;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 676: break;
        case 121: 
        case 141: 
        case 231: 
        case 232: 
        case 253: 
        case 330: 
          { 
    nextState = MIDDLE_OF_LINE;
    lastToken = CToken.LITERAL_FLOATING_POINT;
    String text = yytext();
	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
 }
        case 677: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
