/* The following code was generated by JFlex 1.3.5 on 11/14/02 11:44 AM */

/* JavaScriptLexer.java is a generated file.  You probably want to
 * edit JavaScriptLexer.lex to make changes.  Use JFlex to generate it.
 * To generate JavaScriptLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main JavaScriptLexer.lex</code><br>
 * You will then have a file called JavaScriptLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2002 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package com.Ostermiller.Syntax.Lexer;

import java.io.*;

/** 
 * JavaScriptLexer is a java script lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  JavaScriptLexer shredder = new JavaScriptLexer(System.in);
 *  JavaScriptToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 * The tokens returned should comply with the 
 * <A Href="http://developer.netscape.com/docs/manuals/communicator/jsref/index.htm">
 * Java Script Reference</A>.
 * @see JavaScriptToken
 */ 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/14/02 11:44 AM from the specification file
 * <tt>file:/home/steveo/personal/projects/java/com/Ostermiller/Syntax/Lexer/JavaScriptLexer.lex</tt>
 */
public class JavaScriptLexer implements Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  9,  0,  7,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7, 20, 18,  0,  6, 10, 48, 17, 35, 36, 23, 24, 42, 21, 34, 22, 
     4,  5,  5,  5,  3,  3,  3,  3,  2,  2, 47, 41, 19, 43, 44, 46, 
     0,  1,  1,  1, 33, 30, 31,  6,  6,  6,  6,  6, 26,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6, 28,  6,  6, 39,  8, 40, 50,  6, 
     0, 51, 14, 53, 32, 29, 15, 59, 57, 58,  6, 55, 25, 60, 13, 54, 
    61,  6, 12, 52, 16, 11, 62, 63, 27, 56, 64, 37, 49, 38, 45,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    65,   130,   195,   260,   325,   390,   455,   520,   585, 
      650,   715,   780,   845,   910,   975,  1040,  1105,  1170,  1235, 
     1300,  1365,  1430,  1495,  1560,  1625,  1625,  1625,  1625,  1625, 
     1625,  1625,  1625,  1690,  1755,  1625,  1625,  1625,  1820,  1885, 
     1950,  2015,  2080,  2145,  2210,  2275,  2340,  2405,  2470,  2535, 
     2535,  2535,  2600,  2535,  2665,  2730,  2795,  2860,  2535,  2925, 
     2990,  2535,  3055,  3120,  1625,  3185,  3250,  3315,  3380,  3445, 
     3510,  3575,  3640,  3705,  3770,  3835,  3900,  3965,  4030,  4095, 
     4160,  1625,  4225,  1625,  4290,  4355,  1625,  1625,  1625,  1625, 
     4420,  4485,  1625,  1625,  1625,  1625,  4550,  4615,  4680,  4745, 
     4810,  4875,  4940,  1625,  1625,  5005,  1625,  1625,  1625,  1625, 
     1625,  5070,  5135,  5200,  5265,  5330,  5395,  5460,  5525,  5590, 
     5655,  5720,   130,  5785,  5850,  5915,  5980,  6045,  6110,  6175, 
     6240,  6305,  6370,  6435,  2535,  6500,  6565,  6630,  6695,  6760, 
     6825,   130,  6890,  6955,  7020,  7085,  7150,  7215,  7280,   130, 
     7345,  7410,   130,  7475,  7540,  7605,  7670,  1625,  7735,  7800, 
     7865,  7930,  7995,  8060,  1625,  8125,  8190,  8255,  8320,  8385, 
     8450,  8515,  1625,  8580,  1625,  1625,  8645,  1625,  1625,  8710, 
     8775,  8840,  8905,  8970,  9035,  9100,  9165,  9230,  9295,  9360, 
     9425,  9490,  9555,  9620,  9685,  9750,  9815,  9880,  9945,   130, 
    10010, 10075, 10140, 10205,  2535, 10270, 10335, 10400,   130, 10465, 
    10530, 10595,   130, 10660, 10725, 10790, 10855,   130, 10920,   130, 
    10985,  1625, 11050, 11115,  1625,   130,   130, 11180, 11245, 11310, 
     1625, 11375, 11440, 11505, 11570, 11635, 11700, 11765, 11830,   130, 
    11895, 11960,   130, 12025, 12090, 12155, 12220,   130, 12285, 12350, 
    12415, 12480,   130, 12545,   130, 12610, 12675, 12740,   130, 12805, 
    12870,   130,   130, 12935, 13000, 13065, 13130, 13195, 13260, 13325, 
    13390, 13455,   130, 13520, 13585,   130, 13650,   130,   130, 13715, 
      130, 13780, 13845, 13910, 13975, 14040, 14105, 14170, 14235,   130, 
      130,   130, 14300, 14365, 14430,   130, 14495, 14560, 14625, 14690, 
    14755,   130, 14820,   130, 14885,   130, 14950, 15015, 15080, 15145, 
      130,   130, 15210, 15275, 15340,   130, 15405,   130, 15470,   130, 
      130, 15535, 15600, 15665, 15730, 15795, 15860, 15925,   130,   130, 
      130, 15990,   130, 16055,   130, 16120, 16185, 16250, 16315, 16380, 
      130, 16445, 16510,   130, 16575,   130,   130, 16640,   130
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\2\4\1\5\1\4\1\3\1\6\1\7"+
    "\1\6\1\10\1\3\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\3\3\1\27\2\3\1\30\1\3\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\4\3\1\55\1\56\1\3\1\57\1\60"+
    "\1\61\1\3\7\2\1\0\1\2\2\0\6\2\10\0"+
    "\11\2\21\0\17\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\16\3\2\62\4\4\1\62\1\0"+
    "\1\62\2\0\4\62\1\63\1\62\10\0\2\64\2\62"+
    "\2\65\1\63\2\66\1\67\20\0\20\62\1\70\1\71"+
    "\1\72\1\71\1\62\1\0\1\62\2\0\4\62\1\73"+
    "\1\62\10\0\2\64\2\74\2\75\1\73\2\76\1\77"+
    "\20\0\16\62\7\0\1\6\1\0\1\6\67\0\7\2"+
    "\1\0\1\2\2\0\1\100\5\2\10\0\11\2\21\0"+
    "\16\2\53\0\1\101\25\0\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\4\3\1\102\4\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\1\103\5\3\10\0"+
    "\4\3\1\104\4\3\21\0\1\105\15\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\3\1\106\4\3\10\0\11\3"+
    "\21\0\3\3\1\107\1\3\1\110\10\3\1\2\6\3"+
    "\1\0\1\7\2\0\1\111\5\3\10\0\1\112\10\3"+
    "\21\0\1\113\2\3\1\114\3\3\1\115\6\3\1\2"+
    "\6\3\1\0\1\7\2\0\1\3\1\116\4\3\10\0"+
    "\11\3\21\0\6\3\1\117\7\3\10\120\1\121\1\0"+
    "\7\120\1\122\57\120\10\17\1\123\1\0\10\17\1\124"+
    "\56\17\23\0\1\125\1\126\26\0\1\127\100\0\1\130"+
    "\52\0\1\131\25\0\1\132\53\0\1\133\1\134\23\0"+
    "\1\135\100\0\1\136\55\0\1\137\22\0\1\140\25\0"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\3\3\1\141\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\1\142\1\3\1\143\6\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\4\3\1\144\4\3\21\0\3\3\1\145\12\3\2\0"+
    "\2\146\1\147\1\146\247\0\1\150\100\0\1\151\1\152"+
    "\77\0\1\153\4\0\1\154\73\0\1\155\5\0\1\156"+
    "\72\0\1\157\25\0\1\2\6\3\1\0\1\7\2\0"+
    "\3\3\1\160\2\3\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\1\161\4\3\1\162\10\0"+
    "\11\3\21\0\5\3\1\163\1\164\5\3\1\165\1\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\1\166"+
    "\10\3\21\0\1\167\2\3\1\170\2\3\1\171\7\3"+
    "\1\2\6\3\1\0\1\7\2\0\2\3\1\172\1\3"+
    "\1\173\1\3\10\0\11\3\21\0\11\3\1\174\4\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\3\3\1\175\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\1\176\1\177\4\3\10\0\11\3\21\0\1\200"+
    "\15\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\1\201\2\3\1\202\12\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\6\3"+
    "\1\203\1\204\6\3\7\62\1\0\1\62\2\0\6\62"+
    "\10\0\12\62\20\0\20\62\4\205\1\62\1\0\1\62"+
    "\2\0\6\62\4\0\1\206\2\0\1\206\12\62\20\0"+
    "\20\62\4\67\1\62\1\0\1\62\2\0\4\62\1\63"+
    "\1\62\10\0\4\62\2\65\1\63\2\66\1\62\20\0"+
    "\20\62\4\70\1\62\1\0\1\62\2\0\4\62\1\63"+
    "\1\62\10\0\4\62\2\65\1\63\2\66\1\67\20\0"+
    "\20\62\1\70\3\71\1\62\1\0\1\62\2\0\4\62"+
    "\1\63\1\62\10\0\2\207\2\62\2\65\1\63\2\66"+
    "\1\67\20\0\20\62\1\70\1\71\1\72\1\71\1\62"+
    "\1\0\1\62\2\0\4\62\1\73\1\62\10\0\2\207"+
    "\2\62\2\75\1\73\2\76\1\77\20\0\17\62\5\210"+
    "\1\62\1\0\1\62\2\0\3\62\2\210\1\62\10\0"+
    "\4\62\5\210\1\62\20\0\1\210\1\62\1\210\15\62"+
    "\4\211\1\62\1\0\1\62\2\0\6\62\4\0\1\212"+
    "\2\0\1\212\12\62\20\0\20\62\2\67\1\77\1\67"+
    "\1\62\1\0\1\62\2\0\4\62\1\73\1\62\10\0"+
    "\4\62\2\75\1\73\2\76\1\62\20\0\16\62\1\2"+
    "\5\213\1\2\1\0\1\2\2\0\3\2\2\213\1\2"+
    "\10\0\4\2\5\213\21\0\1\213\1\2\1\213\14\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\214\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\1\215\10\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\14\3\1\216"+
    "\1\3\1\2\6\3\1\0\1\7\2\0\5\3\1\217"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\4\3\1\220\4\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\3\3\1\221\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\222\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\2\3\1\223\3\3\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\3\3\1\224\12\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\1\225\10\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\1\3"+
    "\1\226\4\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\2\3\1\227\3\3\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\1\230"+
    "\5\3\10\0\11\3\21\0\5\3\1\231\10\3\1\2"+
    "\6\3\1\0\1\7\2\0\1\3\1\232\4\3\10\0"+
    "\11\3\21\0\7\3\1\233\6\3\10\234\1\235\1\0"+
    "\7\234\1\236\62\234\1\237\2\240\2\234\1\120\1\0"+
    "\1\234\1\241\7\120\56\234\3\242\3\17\2\242\1\17"+
    "\1\0\1\242\1\243\6\17\1\244\56\242\53\0\1\245"+
    "\52\0\1\246\53\0\11\133\1\0\67\133\27\134\1\247"+
    "\51\134\1\2\6\3\1\0\1\7\2\0\2\3\1\250"+
    "\3\3\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\1\3\1\251"+
    "\14\3\1\2\6\3\1\0\1\7\2\0\5\3\1\252"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\4\3\1\253\1\3\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\1\254\5\3\10\0"+
    "\11\3\21\0\16\3\2\0\4\146\11\0\1\255\15\0"+
    "\2\256\1\255\2\257\41\0\2\146\1\147\1\146\11\0"+
    "\1\260\15\0\2\261\1\260\2\262\112\0\1\263\1\264"+
    "\24\0\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\1\3\1\265\14\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\12\3\1\266"+
    "\3\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\1\267\15\3\1\2\6\3\1\0\1\7"+
    "\2\0\2\3\1\270\3\3\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\3\3\1\271\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\7\3\1\272\6\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\1\273\15\3\1\2\6\3\1\0\1\7\2\0"+
    "\5\3\1\274\10\0\11\3\21\0\1\3\1\275\14\3"+
    "\1\2\6\3\1\0\1\7\2\0\2\3\1\276\3\3"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\1\277\15\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\300\10\0\11\3"+
    "\21\0\1\3\1\301\14\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\12\3\1\302\3\3"+
    "\1\2\6\3\1\0\1\7\2\0\5\3\1\303\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\3\3\1\304\2\3\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\3\3\1\305\3\3\1\306\6\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\2\3\1\307"+
    "\13\3\1\2\6\3\1\0\1\7\2\0\1\3\1\310"+
    "\4\3\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\7\3\1\311"+
    "\6\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\7\3\1\312\6\3\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\313\10\0\11\3\21\0\16\3"+
    "\2\62\4\205\1\62\1\0\1\62\2\0\4\62\1\63"+
    "\1\62\10\0\6\62\1\63\2\66\1\62\20\0\16\62"+
    "\2\0\4\314\73\0\1\62\5\210\1\62\1\0\1\62"+
    "\2\0\3\62\2\210\1\62\10\0\2\315\2\62\5\210"+
    "\1\62\20\0\1\210\1\62\1\210\15\62\4\211\1\62"+
    "\1\0\1\62\2\0\4\62\1\73\1\62\10\0\6\62"+
    "\1\73\2\76\1\62\20\0\16\62\2\0\4\316\73\0"+
    "\1\2\5\317\1\2\1\0\1\2\2\0\3\2\2\317"+
    "\1\2\10\0\4\2\5\317\21\0\1\317\1\2\1\317"+
    "\14\2\6\3\1\0\1\7\2\0\1\320\5\3\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\1\321\10\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\7\3"+
    "\1\322\6\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\1\323\15\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\1\324\10\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\4\3"+
    "\1\325\4\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\2\3\1\326\13\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\1\327\15\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\1\3\1\330\14\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\1\331\15\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\4\3\1\332\4\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\3\3"+
    "\1\333\12\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\1\3\1\334\14\3\10\234\1\235"+
    "\1\0\7\234\1\122\70\234\1\0\72\234\3\120\2\234"+
    "\1\235\1\0\7\234\1\236\62\234\3\237\2\234\1\235"+
    "\1\0\7\234\1\236\60\234\5\335\2\234\1\235\1\0"+
    "\4\234\2\335\1\234\1\122\13\234\5\335\21\234\1\335"+
    "\1\234\1\335\13\234\11\242\1\0\10\242\1\336\57\242"+
    "\5\337\3\242\1\0\4\242\2\337\2\242\1\336\12\242"+
    "\5\337\21\242\1\337\1\242\1\337\13\242\10\244\1\340"+
    "\1\0\10\244\1\124\56\244\25\0\1\133\53\0\26\134"+
    "\1\341\1\247\51\134\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\10\3\1\342\5\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\4\3\1\343"+
    "\4\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\4\3\1\344\4\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\1\345\15\3\1\2\6\3\1\0\1\7\2\0\3\3"+
    "\1\346\2\3\10\0\11\3\21\0\16\3\2\0\4\314"+
    "\17\0\1\206\2\0\1\206\52\0\4\316\17\0\1\212"+
    "\2\0\1\212\123\0\1\347\25\0\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\350\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\4\3"+
    "\1\351\4\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\352\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\2\3\1\353\13\3\1\2\6\3\1\0\1\7\2\0"+
    "\1\3\1\354\4\3\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\355\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\1\3\1\356\14\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\2\3"+
    "\1\357\13\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\4\3\1\360\4\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\5\3\1\361\10\0\11\3\21\0"+
    "\1\3\1\362\14\3\1\2\6\3\1\0\1\7\2\0"+
    "\1\3\1\363\4\3\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\4\3\1\364"+
    "\4\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\5\3\1\365\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\1\366\10\3\21\0"+
    "\3\3\1\367\12\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\3\3\1\370\12\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\1\371\10\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\5\3"+
    "\1\372\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\13\3\1\373"+
    "\2\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\4\3\1\374\11\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\7\3\1\375\1\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\1\376\10\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\6\3\1\377\7\3"+
    "\2\0\4\314\11\0\1\255\17\0\1\255\2\257\41\0"+
    "\4\316\11\0\1\260\17\0\1\260\2\262\37\0\1\2"+
    "\5\u0100\1\2\1\0\1\2\2\0\3\2\2\u0100\1\2"+
    "\10\0\4\2\5\u0100\21\0\1\u0100\1\2\1\u0100\14\2"+
    "\6\3\1\0\1\7\2\0\1\3\1\u0101\4\3\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\13\3\1\u0102\2\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\4\3\1\u0103\11\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\4\3\1\u0104\4\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\u0105\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\5\3"+
    "\1\u0106\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\4\3\1\u0107\4\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\1\u0108\10\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\14\3\1\u0109\1\3"+
    "\1\234\5\u010a\2\234\1\235\1\0\4\234\2\u010a\1\234"+
    "\1\122\13\234\5\u010a\21\234\1\u010a\1\234\1\u010a\13\234"+
    "\1\242\5\u010b\3\242\1\0\4\242\2\u010b\2\242\1\336"+
    "\12\242\5\u010b\21\242\1\u010b\1\242\1\u010b\13\242\3\0"+
    "\3\244\2\0\1\244\2\0\1\u010c\7\244\56\0\1\2"+
    "\6\3\1\0\1\7\2\0\2\3\1\u010d\3\3\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\1\u010e\5\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\1\u010f\10\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\1\3\1\u0110"+
    "\4\3\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\1\3\1\u0111\4\3\10\0\11\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\7\3\1\u0112\6\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\6\3\1\u0113"+
    "\7\3\1\2\6\3\1\0\1\7\2\0\5\3\1\u0114"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\2\3\1\u0115\13\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\1\3\1\u0116\14\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\6\3\1\u0117\7\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\7\3\1\u0118\6\3\1\2\6\3\1\0\1\7"+
    "\2\0\5\3\1\u0119\10\0\11\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\1\3\1\u011a\4\3\10\0"+
    "\11\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\1\u011b\15\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\4\3\1\u011c\4\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\1\3"+
    "\1\u011d\4\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\7\3"+
    "\1\u011e\6\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\4\3\1\u011f\4\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\1\u0120"+
    "\15\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\1\u0121\15\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\4\3\1\u0122\4\3\21\0\16\3"+
    "\1\2\5\3\1\2\1\0\1\2\2\0\3\2\2\3"+
    "\1\2\10\0\4\2\5\3\21\0\1\3\1\2\1\3"+
    "\14\2\6\3\1\0\1\7\2\0\2\3\1\u0123\3\3"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\4\3\1\u0124\4\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\1\u0125\15\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\7\3\1\u0126\6\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\1\u0127\10\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\1\3\1\u0128\14\3\1\234\5\u0129"+
    "\2\234\1\235\1\0\4\234\2\u0129\1\234\1\122\13\234"+
    "\5\u0129\21\234\1\u0129\1\234\1\u0129\13\234\1\242\5\u012a"+
    "\3\242\1\0\4\242\2\u012a\2\242\1\336\12\242\5\u012a"+
    "\21\242\1\u012a\1\242\1\u012a\13\242\1\0\5\u012b\10\0"+
    "\2\u012b\15\0\5\u012b\21\0\1\u012b\1\0\1\u012b\13\0"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\7\3"+
    "\1\u012c\1\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\1\u012d\10\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\4\3\1\u012e"+
    "\4\3\21\0\16\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\11\3\21\0\1\u012f\15\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\2\3"+
    "\1\u0130\13\3\1\2\6\3\1\0\1\7\2\0\1\3"+
    "\1\u0131\4\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\6\3"+
    "\1\u0132\7\3\1\2\6\3\1\0\1\7\2\0\2\3"+
    "\1\u0133\3\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\4\3\1\u0134\1\3\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\2\3"+
    "\1\u0135\3\3\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\11\3\21\0\11\3"+
    "\1\u0136\4\3\1\2\6\3\1\0\1\7\2\0\5\3"+
    "\1\u0137\10\0\11\3\21\0\16\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\2\3\1\u0138"+
    "\13\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\2\3\1\u0139\13\3\1\2\6\3\1\0"+
    "\1\7\2\0\5\3\1\u013a\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\10\3\1\u013b\5\3\1\2\6\3\1\0\1\7"+
    "\2\0\2\3\1\u013c\3\3\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\11\3"+
    "\21\0\3\3\1\u013d\12\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\5\3\1\u013e\10\3"+
    "\1\234\5\120\2\234\1\235\1\0\4\234\2\120\1\234"+
    "\1\122\13\234\5\120\21\234\1\120\1\234\1\120\13\234"+
    "\1\242\5\17\3\242\1\0\4\242\2\17\2\242\1\336"+
    "\12\242\5\17\21\242\1\17\1\242\1\17\13\242\1\0"+
    "\5\u013f\10\0\2\u013f\15\0\5\u013f\21\0\1\u013f\1\0"+
    "\1\u013f\13\0\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\1\3\1\u0140\14\3\1\2\6\3"+
    "\1\0\1\7\2\0\5\3\1\u0141\10\0\11\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\2\3\1\u0142\13\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\11\3\21\0\3\3\1\u0143"+
    "\12\3\1\2\6\3\1\0\1\7\2\0\1\u0144\5\3"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\1\u0145\15\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\2\3\1\u0146\13\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\4\3\1\u0147\4\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\5\3\1\u0148\10\0\11\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\4\3\1\u0149\4\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\4\3\1\u014a\4\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\2\3"+
    "\1\u014b\3\3\10\0\11\3\21\0\16\3\1\0\5\u014c"+
    "\10\0\2\u014c\15\0\5\u014c\21\0\1\u014c\1\0\1\u014c"+
    "\13\0\1\2\6\3\1\0\1\7\2\0\5\3\1\u014d"+
    "\10\0\11\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\2\3\1\u014e\3\3\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\4\3"+
    "\1\u014f\4\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\6\3\10\0\11\3\21\0\2\3\1\u0150\13\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\4\3"+
    "\1\u0151\4\3\21\0\16\3\1\2\6\3\1\0\1\7"+
    "\2\0\2\3\1\u0152\3\3\10\0\11\3\21\0\16\3"+
    "\1\2\6\3\1\0\1\7\2\0\6\3\10\0\4\3"+
    "\1\u0153\4\3\21\0\16\3\1\0\5\244\10\0\2\244"+
    "\15\0\5\244\21\0\1\244\1\0\1\244\13\0\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\7\3\1\u0154\6\3\1\2\6\3\1\0\1\7\2\0"+
    "\6\3\10\0\4\3\1\u0155\4\3\21\0\16\3\1\2"+
    "\6\3\1\0\1\7\2\0\6\3\10\0\11\3\21\0"+
    "\3\3\1\u0156\12\3\1\2\6\3\1\0\1\7\2\0"+
    "\5\3\1\u0157\10\0\11\3\21\0\16\3\1\2\6\3"+
    "\1\0\1\7\2\0\6\3\10\0\7\3\1\u0158\1\3"+
    "\21\0\16\3\1\2\6\3\1\0\1\7\2\0\6\3"+
    "\10\0\11\3\21\0\15\3\1\u0159\1\2\6\3\1\0"+
    "\1\7\2\0\4\3\1\u015a\1\3\10\0\11\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\11\3\21\0\1\3\1\u015b\14\3\1\2\6\3\1\0"+
    "\1\7\2\0\6\3\10\0\4\3\1\u015c\4\3\21\0"+
    "\16\3\1\2\6\3\1\0\1\7\2\0\6\3\10\0"+
    "\7\3\1\u015d\1\3\21\0\16\3";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  9, 
     9,  1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  9,  1,  9,  1,  0,  9,  9,  9,  9,  1,  1,  9,  9,  9,  9, 
     1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  9,  9,  9,  9,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  1,  1, 
     1,  1,  1,  1,  9,  0,  1,  1,  1,  1,  1,  1,  9,  0,  9,  9, 
     0,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  0, 
     9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    int lastToken;

    private int nextState=YYINITIAL;
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }        
    
    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }                   
            } else {
                in = System.in;
            }       
            JavaScriptLexer shredder = new JavaScriptLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != JavaScriptToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    } 

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[16705];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 86: 
          {  
    lastToken = JavaScriptToken.OPERATOR_LESS_THAN_OR_EQUAL;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 350: break;
        case 106: 
          {  
    lastToken = JavaScriptToken.OPERATOR_BITWISE_AND_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 351: break;
        case 108: 
          {  
    lastToken = JavaScriptToken.OPERATOR_BITWISE_OR_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 352: break;
        case 110: 
          {  
    lastToken = JavaScriptToken.OPERATOR_BITWISE_XOR_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 353: break;
        case 289: 
          {  
    lastToken = JavaScriptToken.RESERVED_WORD_TRANSIENT;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+9, nextState));
    return (t);
 }
        case 354: break;
        case 84: 
          {  
    lastToken = JavaScriptToken.OPERATOR_SHIFT_LEFT;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 355: break;
        case 87: 
          {  
    lastToken = JavaScriptToken.OPERATOR_NOT_EQUAL;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 356: break;
        case 88: 
          {  
    lastToken = JavaScriptToken.OPERATOR_DECREMENT;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 357: break;
        case 94: 
          {  
    lastToken = JavaScriptToken.OPERATOR_INCREMENT;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 358: break;
        case 95: 
          {  
    lastToken = JavaScriptToken.OPERATOR_ADD_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 359: break;
        case 109: 
          {  
    lastToken = JavaScriptToken.OPERATOR_LOGICAL_OR;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 360: break;
        case 262: 
          {  
    lastToken = JavaScriptToken.LITERAL_BOOLEAN;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 361: break;
        case 217: 
          {  
    lastToken = JavaScriptToken.LITERAL_BOOLEAN;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 362: break;
        case 221: 
          {  
    lastToken = JavaScriptToken.ERROR_MALFORMED_STRING;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 363: break;
        case 91: 
        case 166: 
          {  
    lastToken = JavaScriptToken.ERROR_UNCLOSED_COMMENT;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 364: break;
        case 1: 
        case 6: 
        case 63: 
        case 138: 
        case 206: 
        case 255: 
          {  
    lastToken = JavaScriptToken.ERROR_IDENTIFIER;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 365: break;
        case 104: 
          {  
    lastToken = JavaScriptToken.OPERATOR_GREATER_THAN_OR_EQUAL;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 366: break;
        case 157: 
          {  
    lastToken = JavaScriptToken.LITERAL_CHARACTER;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 367: break;
        case 51: 
          {  
    try {
        if (lastToken == JavaScriptToken.OPERATOR_SUBTRACT){
            Long.decode('-' + yytext().substring(0,yytext().length()-1));
        } else {
            Long.decode(yytext().substring(0,yytext().length()-1));
        }
        lastToken = JavaScriptToken.LITERAL_LONG_DECIMAL;
    } catch (NumberFormatException e){  
        lastToken = JavaScriptToken.ERROR_LONG_DECIMIAL_SIZE;
    }
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 368: break;
        case 208: 
          {  
    lastToken = JavaScriptToken.LITERAL_NULL;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 369: break;
        case 82: 
        case 161: 
        case 162: 
        case 222: 
        case 266: 
        case 297: 
          {  
    lastToken = JavaScriptToken.ERROR_MALFORMED_UNCLOSED_STRING;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 370: break;
        case 179: 
          {  
    lastToken = JavaScriptToken.OPERATOR_SHIFT_RIGHT_UNSIGNED;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+3, nextState));
    return (t);
 }
        case 371: break;
        case 90: 
          {  
    lastToken = JavaScriptToken.COMMENT_END_OF_LINE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 372: break;
        case 13: 
        case 155: 
        case 160: 
        case 220: 
        case 265: 
        case 296: 
          {  
    lastToken = JavaScriptToken.ERROR_MALFORMED_UNCLOSED_CHARACTER;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 373: break;
        case 25: 
          {  
    lastToken = JavaScriptToken.SEPARATOR_LPAREN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
     }
        case 374: break;
        case 178: 
          { 
    lastToken = JavaScriptToken.OPERATOR_SHIFT_RIGHT_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+3, nextState));
    return (t);
 }
        case 375: break;
        case 49: 
        case 52: 
        case 55: 
        case 59: 
        case 60: 
          {  
    lastToken = JavaScriptToken.ERROR_FLOAT;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 376: break;
        case 35: 
          { 
    lastToken = JavaScriptToken.OPERATOR_BITWISE_COMPLIMENT;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 377: break;
        case 5: 
          {  
    lastToken = JavaScriptToken.WHITE_SPACE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 378: break;
        case 2: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 21: 
        case 22: 
        case 23: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 139: 
        case 140: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 150: 
        case 151: 
        case 153: 
        case 154: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 200: 
        case 201: 
        case 202: 
        case 207: 
        case 209: 
        case 210: 
        case 211: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 218: 
        case 227: 
        case 228: 
        case 229: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 240: 
        case 241: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 253: 
        case 256: 
        case 257: 
        case 259: 
        case 260: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 273: 
        case 274: 
        case 276: 
        case 279: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 292: 
        case 293: 
        case 294: 
        case 299: 
        case 300: 
        case 302: 
        case 304: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 312: 
        case 313: 
        case 314: 
        case 316: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 333: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 341: 
        case 342: 
        case 344: 
        case 347: 
          {  
    lastToken = JavaScriptToken.IDENTIFIER;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 379: break;
        case 105: 
          {  
    lastToken = JavaScriptToken.OPERATOR_SHIFT_RIGHT;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 380: break;
        case 107: 
          {  
    lastToken = JavaScriptToken.OPERATOR_LOGICAL_AND;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 381: break;
        case 346: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_IMPLEMENTS;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+10, nextState));
    return (t);
 }
        case 382: break;
        case 345: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_INSTANCEOF;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+10, nextState));
    return (t);
 }
        case 383: break;
        case 343: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_PROTECTED;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+9, nextState));
    return (t);
 }
        case 384: break;
        case 340: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_INTERFACE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+9, nextState));
    return (t);
 }
        case 385: break;
        case 40: 
          { 
    lastToken = JavaScriptToken.OPERATOR_BITWISE_XOR;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 386: break;
        case 39: 
          { 
    lastToken = JavaScriptToken.OPERATOR_BITWISE_OR;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 387: break;
        case 38: 
          { 
    lastToken = JavaScriptToken.OPERATOR_BITWISE_AND;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 388: break;
        case 31: 
          { 
    lastToken = JavaScriptToken.SEPARATOR_SEMICOLON;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 389: break;
        case 16: 
          { 
    lastToken = JavaScriptToken.OPERATOR_LOGICAL_NOT;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 390: break;
        case 64: 
          { 
    lastToken = JavaScriptToken.OPERATOR_MOD_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 391: break;
        case 7: 
          { 
    lastToken = JavaScriptToken.OPERATOR_MOD;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 392: break;
        case 20: 
          { 
    lastToken = JavaScriptToken.OPERATOR_ADD;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 393: break;
        case 100: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_DO;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+2, nextState));
    return (t);
 }
        case 394: break;
        case 121: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_IN;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+2, nextState));
    return (t);
 }
        case 395: break;
        case 122: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_IF;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+2, nextState));
    return (t);
 }
        case 396: break;
        case 61: 
        case 62: 
        case 102: 
        case 136: 
        case 177: 
        case 205: 
          { 
    lastToken = JavaScriptToken.LITERAL_DOUBLE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 397: break;
        case 3: 
        case 4: 
          { 
    /* At this point, the number we found could still be too large.
     * If it is too large, we need to return an error.
     * Java has methods built in that will decode from a string
     * and throw an exception the number is too large 
     */
    try {
        /* bigger negatives are allowed than positives.  Thus
         * we have to be careful to make sure a neg sign is preserved
         */
        if (lastToken == JavaScriptToken.OPERATOR_SUBTRACT){
            Integer.decode('-' + yytext());
        } else {
            Integer.decode(yytext());
        }
        lastToken = JavaScriptToken.LITERAL_INTEGER_DECIMAL;
    } catch (NumberFormatException e){
        lastToken = JavaScriptToken.ERROR_INTEGER_DECIMIAL_SIZE;
    }
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 398: break;
        case 58: 
        case 175: 
          { 
    /* catch the case of a zero in parsing, so that we do not incorrectly
     * give an error that a number was rounded to zero
     */
    lastToken = JavaScriptToken.LITERAL_FLOATING_POINT;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 399: break;
        case 79: 
        case 158: 
        case 159: 
          {  
    lastToken = JavaScriptToken.ERROR_UNCLOSED_CHARACTER;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 400: break;
        case 81: 
          {  
    lastToken = JavaScriptToken.ERROR_MALFORMED_CHARACTER;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 401: break;
        case 254: 
          {  
    lastToken = JavaScriptToken.RESERVED_WORD_WITH;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 402: break;
        case 224: 
          { 
    lastToken = JavaScriptToken.COMMENT_TRADITIONAL;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 403: break;
        case 252: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_VOID;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 404: break;
        case 247: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_GOTO;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 405: break;
        case 242: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_CHAR;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 406: break;
        case 239: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_CASE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 407: break;
        case 226: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_ELSE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 408: break;
        case 225: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_LONG;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 409: break;
        case 219: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_THIS;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 410: break;
        case 212: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_BYTE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 411: break;
        case 204: 
          { 
    /* A Hex long cannot be too big.  After removing 
     * initial zeros, It can have 17 digits, the last of which is
     * the L or l
     */
    lastToken = JavaScriptToken.LITERAL_LONG_HEXIDECIMAL;
    int i;
    int length =yytext().length();
    for (i=2 ; i<length-17; i++){
        //check for initial zeros
        if (yytext().charAt(i) != '0'){ 
            lastToken = JavaScriptToken.ERROR_LONG_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 17){
        lastToken = JavaScriptToken.ERROR_LONG_HEXIDECIMAL_SIZE;
    }
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 412: break;
        case 199: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_VAR;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+3, nextState));
    return (t);
 }
        case 413: break;
        case 191: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_INT;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+3, nextState));
    return (t);
 }
        case 414: break;
        case 50: 
        case 172: 
          { 
    /* Sun s java has a few bugs here.  Their MAX_FLOAT and MIN_FLOAT do not
     * quite match the spec.  Its not far off, so we will deal.  If they fix
     * then we are fixed.  So all good.
     */ 
    Float f;
    try {
        f = Float.valueOf(yytext());
        if (f.isInfinite() || f.compareTo(new Float(0f)) == 0){
            lastToken = JavaScriptToken.ERROR_FLOAT_SIZE;
        } else {
            lastToken = JavaScriptToken.LITERAL_FLOATING_POINT;
        }
    } catch (NumberFormatException e){
        lastToken = JavaScriptToken.ERROR_FLOAT_SIZE;
    }
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 415: break;
        case 37: 
          { 
    lastToken = JavaScriptToken.OPERATOR_COLON;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 416: break;
        case 103: 
          { 
    lastToken = JavaScriptToken.OPERATOR_EQUAL;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 417: break;
        case 141: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_NEW;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+3, nextState));
    return (t);
 }
        case 418: break;
        case 149: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_FOR;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+3, nextState));
    return (t);
 }
        case 419: break;
        case 152: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_TRY;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+3, nextState));
    return (t);
 }
        case 420: break;
        case 348: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_SYNCHRONIZED;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+12, nextState));
    return (t);
 }
        case 421: break;
        case 334: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_CONTINUE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+8, nextState));
    return (t);
 }
        case 422: break;
        case 332: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_ABSTRACT;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
 }
        case 423: break;
        case 330: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_FUNCTION;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+8, nextState));
    return (t);
 }
        case 424: break;
        case 329: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_PACKAGE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
 }
        case 425: break;
        case 328: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_PRIVATE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
 }
        case 426: break;
        case 320: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_DEFAULT;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
 }
        case 427: break;
        case 319: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_EXTENDS;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
 }
        case 428: break;
        case 317: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_FINALLY;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
 }
        case 429: break;
        case 315: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_BOOLEAN;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
 }
        case 430: break;
        case 36: 
          { 
    lastToken = JavaScriptToken.OPERATOR_QUESTION;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 431: break;
        case 34: 
          { 
    lastToken = JavaScriptToken.OPERATOR_GREATER_THAN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 432: break;
        case 30: 
          { 
    lastToken = JavaScriptToken.SEPARATOR_RBRACKET;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 433: break;
        case 29: 
          { 
    lastToken = JavaScriptToken.SEPARATOR_LBRACKET;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 434: break;
        case 15: 
          { 
    lastToken = JavaScriptToken.OPERATOR_LESS_THAN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 435: break;
        case 17: 
          { 
    lastToken = JavaScriptToken.OPERATOR_SUBTRACT;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 436: break;
        case 19: 
          { 
    lastToken = JavaScriptToken.OPERATOR_MULTIPLY;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 437: break;
        case 92: 
          {  
    lastToken = JavaScriptToken.OPERATOR_DIVIDE_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 438: break;
        case 311: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_PUBLIC;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
 }
        case 439: break;
        case 310: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_IMPORT;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
 }
        case 440: break;
        case 305: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_SWITCH;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
 }
        case 441: break;
        case 303: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_STATIC;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
 }
        case 442: break;
        case 301: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_DOUBLE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
 }
        case 443: break;
        case 295: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_THROWS;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
 }
        case 444: break;
        case 291: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_NATIVE;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
 }
        case 445: break;
        case 290: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_RETURN;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
 }
        case 446: break;
        case 280: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_CONST;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 447: break;
        case 278: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_CATCH;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 448: break;
        case 277: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_CLASS;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 449: break;
        case 275: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_SHORT;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 450: break;
        case 272: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_SUPER;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 451: break;
        case 264: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_THROW;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 452: break;
        case 263: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_FINAL;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 453: break;
        case 261: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_FLOAT;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 454: break;
        case 258: 
          { 
    lastToken = JavaScriptToken.RESERVED_WORD_BREAK;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 455: break;
        case 33: 
          { 
    lastToken = JavaScriptToken.OPERATOR_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 456: break;
        case 32: 
          { 
    lastToken = JavaScriptToken.SEPARATOR_COMMA;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 457: break;
        case 28: 
          { 
    lastToken = JavaScriptToken.SEPARATOR_RBRACE;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 458: break;
        case 18: 
          { 
    lastToken = JavaScriptToken.OPERATOR_DIVIDE;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 459: break;
        case 24: 
          { 
    lastToken = JavaScriptToken.SEPARATOR_PERIOD;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 460: break;
        case 26: 
          { 
    lastToken = JavaScriptToken.SEPARATOR_RPAREN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 461: break;
        case 27: 
          { 
    lastToken = JavaScriptToken.SEPARATOR_LBRACE;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 462: break;
        case 53: 
        case 54: 
        case 101: 
        case 132: 
        case 174: 
        case 203: 
          { 
    Double d;
    try {
        d = Double.valueOf(yytext());
        if (d.isInfinite() || d.compareTo(new Double(0d)) == 0){
            lastToken = JavaScriptToken.ERROR_DOUBLE_SIZE;
        } else {
            lastToken = JavaScriptToken.LITERAL_DOUBLE;
        }
    } catch (NumberFormatException e){
        lastToken = JavaScriptToken.ERROR_DOUBLE_SIZE;
    } 
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 463: break;
        case 14: 
        case 163: 
          {  
    /* most of these errors have to be caught down near the end of the file.
     * This way, previous expressions of the same length have precedence.
     * This is really useful for catching anything bad by just allowing it 
     * to slip through the cracks. 
     */ 
    lastToken = JavaScriptToken.ERROR_UNCLOSED_STRING;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 464: break;
        case 83: 
          {  
    lastToken = JavaScriptToken.LITERAL_STRING;
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 465: break;
        case 89: 
          {  
    lastToken = JavaScriptToken.OPERATOR_SUBTRACT_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 466: break;
        case 93: 
          {  
    lastToken = JavaScriptToken.OPERATOR_MULTIPLY_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 467: break;
        case 230: 
          { 
    lastToken = JavaScriptToken.OPERATOR_SHIFT_RIGHT_UNSIGNED_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+4, nextState));
    return (t);
 }
        case 468: break;
        case 134: 
          { 
    /* An Octal number cannot be too big.  After removing 
     * initial zeros, It can have 23 digits, the first
     * of which must be 1 or less.  The last will be the L or l
     * at the end.
     */
    lastToken = JavaScriptToken.LITERAL_LONG_OCTAL;
    int i;
    int length =yytext().length();
    for (i=1 ; i<length-23; i++){
        //check for initial zeros
        if (yytext().charAt(i) != '0'){ 
            lastToken = JavaScriptToken.ERROR_LONG_OCTAL_SIZE;
        }
    }
    if (length - i > 23){
        lastToken = JavaScriptToken.ERROR_LONG_OCTAL_SIZE;
    } else if (length - i == 23){
        // if the rest of the number is as big as possible
        // the first digit can only be 3 or less
        if (yytext().charAt(i) != '0' && yytext().charAt(i) != '1'){
            lastToken = JavaScriptToken.ERROR_LONG_OCTAL_SIZE;
        }
    }
    // Otherwise, it should be OK   
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 469: break;
        case 135: 
          { 
    /* A Hex number cannot be too big.  After removing 
     * initial zeros, It can have 8 digits
     */
    lastToken = JavaScriptToken.LITERAL_INTEGER_HEXIDECIMAL;
    int i;
    int length =yytext().length();
    for (i=2 ; i<length-8; i++){
        //check for initial zeros
        if (yytext().charAt(i) != '0'){ 
            lastToken = JavaScriptToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 8){
        lastToken = JavaScriptToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
    }
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 470: break;
        case 164: 
          { 
    lastToken = JavaScriptToken.OPERATOR_SHIFT_LEFT_ASSIGN;
    JavaScriptToken t = (new JavaScriptToken(lastToken,yytext(),yyline,yychar,yychar+3, nextState));
    return (t);
 }
        case 471: break;
        case 56: 
        case 57: 
          { 
    /* An Octal number cannot be too big.  After removing 
     * initial zeros, It can have 11 digits, the first
     * of which must be 3 or less.
     */
    lastToken = JavaScriptToken.LITERAL_INTEGER_OCTAL;
    int i;
    int length =yytext().length();
    for (i=1 ; i<length-11; i++){
        //check for initial zeros
        if (yytext().charAt(i) != '0'){ 
            lastToken = JavaScriptToken.ERROR_INTEGER_OCTAL_SIZE;
        }
    }
    if (length - i > 11){
        lastToken = JavaScriptToken.ERROR_INTEGER_OCTAL_SIZE;
    } else if (length - i == 11){
        // if the rest of the number is as big as possible
        // the first digit can only be 3 or less
        if (yytext().charAt(i) != '0' && yytext().charAt(i) != '1' && 
        yytext().charAt(i) != '2' && yytext().charAt(i) != '3'){
            lastToken = JavaScriptToken.ERROR_INTEGER_OCTAL_SIZE;
        }
    }
    // Otherwise, it should be OK   
    JavaScriptToken t = (new JavaScriptToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 472: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
