/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mirth.
 *
 * The Initial Developer of the Original Code is
 * WebReach, Inc.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Gerald Bortis <geraldb@webreachinc.com>
 *
 * ***** END LICENSE BLOCK ***** */


package com.webreach.mirth.core.tests;

import java.sql.Timestamp;
import java.util.Calendar;

import junit.framework.TestCase;

import com.webreach.mirth.core.Channel;
import com.webreach.mirth.core.Message;
import com.webreach.mirth.core.MessageList;
import com.webreach.mirth.core.util.DatabaseConnection;

public class MessageListTest extends TestCase {
	
	private Channel channel = null;
	private MessageList messageList = null;
	private DatabaseConnection dbConnection = null;
	
	protected void setUp() throws Exception {
		super.setUp();
		channel = new Channel();
		channel.setName("TestChannel");
		messageList = new MessageList(channel);
		
		dbConnection = new DatabaseConnection();
	
		StringBuffer create = new StringBuffer();
		create.append("DROP TABLE MESSAGES IF EXISTS;");
		create.append("CREATE TABLE MESSAGES");
		create.append("(ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 0) NOT NULL PRIMARY KEY,");
		create.append("CHANNEL_NAME VARCHAR(4000) NOT NULL,");
		create.append("DATE_CREATED timestamp NOT NULL,");
		create.append("SENDING_FACILITY VARCHAR(4000) NOT NULL,");
		create.append("EVENT VARCHAR(4000) NOT NULL,");
		create.append("CONTROL_ID VARCHAR(4000) NOT NULL,");
		create.append("MESSAGE VARCHAR(4000) NOT NULL);");

		dbConnection.update(create.toString());
		dbConnection.close();
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}

	public void testAdd() {
		Calendar cal = Calendar.getInstance();
		
		Message message = new Message();
		message.setDate(new Timestamp(cal.getTimeInMillis()));
		message.setSendingFacility("Hospital A");
		message.setEvent("ADT_A01");
		message.setControlId("123456");
		message.setMessage("MSH");
		messageList.add(message);
	
		assertEquals(messageList.getMessages().getSize(), 1);
	}
}
