/*
 * Copyright (c) Mirth Corporation. All rights reserved.
 * http://www.mirthcorp.com
 * 
 * The software in this package is published under the terms of the MPL
 * license a copy of which has been included with this distribution in
 * the LICENSE.txt file.
 */

package com.mirth.connect.donkey.model.channel;

import java.io.Serializable;

import org.apache.commons.lang3.ArrayUtils;

import com.mirth.connect.donkey.model.message.Status;

public class ResponseConnectorProperties implements Serializable {

    /**
     * "Respond From" key indicating that no response should be sent back
     */
    public static final String RESPONSE_NONE = "None";

    /**
     * "Respond From" key indicating that the response returned by the source
     * connector should be auto-generated by the inbound data type, with a
     * status of SENT
     */
    public static final String RESPONSE_AUTO_BEFORE = "Auto-generate (Before processing)";

    /**
     * "Respond From" key indicating that the response returned by the source
     * connector should be auto-generated by the inbound data type and based on
     * whether or not a message is filtered or errored in the source
     * filter/transformer
     */
    public static final String RESPONSE_SOURCE_TRANSFORMED = "Auto-generate (After source transformer)";

    /**
     * "Respond From" key indicating that the response returned by the source
     * connector should be auto-generated by the inbound data type and based on
     * whether or not all destinations sent or queued the message successfully
     */
    public static final String RESPONSE_DESTINATIONS_COMPLETED = "Auto-generate (Destinations completed)";

    /**
     * Response map key to be used to store the post-processor's custom response
     */
    public static final String RESPONSE_POST_PROCESSOR = "Postprocessor";

    /**
     * When returning a response status based on the statuses of all
     * destinations, use this precedence order in determining which status to
     * use when the destination statuses are different
     */
    public static final Status[] RESPONSE_STATUS_PRECEDENCE = new Status[] { Status.ERROR, Status.QUEUED, Status.SENT, Status.FILTERED };

    public static final String[] DEFAULT_QUEUE_ON_RESPONSES = new String[] { RESPONSE_NONE, RESPONSE_AUTO_BEFORE };
    public static final String[] DEFAULT_QUEUE_OFF_RESPONSES = ArrayUtils.addAll(DEFAULT_QUEUE_ON_RESPONSES, RESPONSE_SOURCE_TRANSFORMED, RESPONSE_DESTINATIONS_COMPLETED, RESPONSE_POST_PROCESSOR);

    private String responseVariable;
    private String[] defaultQueueOnResponses;
    private String[] defaultQueueOffResponses;
    private boolean respondAfterProcessing;

    public ResponseConnectorProperties() {
        this(true);
    }

    public ResponseConnectorProperties(boolean autoResponseEnabled) {
        this(autoResponseEnabled, RESPONSE_NONE, DEFAULT_QUEUE_ON_RESPONSES, DEFAULT_QUEUE_OFF_RESPONSES);
    }

    private ResponseConnectorProperties(boolean autoResponseEnabled, String defaultResponse, String[] defaultQueueOnResponses, String[] defaultQueueOffResponses) {
        if (autoResponseEnabled) {
            this.responseVariable = defaultResponse;
            this.defaultQueueOnResponses = defaultQueueOnResponses;
            this.defaultQueueOffResponses = defaultQueueOffResponses;
        } else {
            this.responseVariable = RESPONSE_NONE;
            this.defaultQueueOnResponses = new String[] { RESPONSE_NONE };
            this.defaultQueueOffResponses = new String[] { RESPONSE_NONE };
        }
        this.setRespondAfterProcessing(true);
    }

    public String getResponseVariable() {
        return responseVariable;
    }

    public void setResponseVariable(String responseVariable) {
        this.responseVariable = responseVariable;
    }

    public String[] getDefaultQueueOnResponses() {
        return defaultQueueOnResponses;
    }

    public String[] getDefaultQueueOffResponses() {
        return defaultQueueOffResponses;
    }

    public boolean isRespondAfterProcessing() {
        return respondAfterProcessing;
    }

    public void setRespondAfterProcessing(boolean respondAfterProcessing) {
        this.respondAfterProcessing = respondAfterProcessing;
    }

}
