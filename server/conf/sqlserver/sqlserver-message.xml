<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap
PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
"conf/sql-map-2.dtd">

<sqlMap namespace="Message">
	<parameterMap class="com.webreach.mirth.model.MessageObject" id="insert-message-param">
		<parameter property="id" jdbcType="VARCHAR" />
		<parameter property="serverId" jdbcType="VARCHAR" />
		<parameter property="channelId" jdbcType="VARCHAR" />
		<parameter property="source" jdbcType="VARCHAR" />
		<parameter property="type" jdbcType="VARCHAR" />
		<parameter property="dateCreated" jdbcType="TIMESTAMP" />
		<parameter property="version" jdbcType="VARCHAR" />
		<parameter property="encrypted" jdbcType="SMALLINT" />
		<parameter property="status" jdbcType="VARCHAR" />
		<parameter property="rawData" jdbcType="CLOB" />
		<parameter property="rawDataProtocol" jdbcType="VARCHAR" />
		<parameter property="transformedData" jdbcType="CLOB" />
		<parameter property="transformedDataProtocol" jdbcType="VARCHAR" />
		<parameter property="encodedData" jdbcType="CLOB" />
		<parameter property="encodedDataProtocol" jdbcType="VARCHAR" />
		<parameter property="connectorName" jdbcType="VARCHAR" />
		<parameter property="errors" jdbcType="CLOB" />
		<parameter property="correlationId" jdbcType="VARCHAR" />
		<parameter property="connectorMap" jdbcType="CLOB" />
		<parameter property="channelMap" jdbcType="CLOB" />
		<parameter property="responseMap" jdbcType="CLOB" />
	</parameterMap>

	<parameterMap class="com.webreach.mirth.model.MessageObject" id="update-message-param">
		<parameter property="status" jdbcType="VARCHAR" />
		<parameter property="rawData" jdbcType="CLOB" />
		<parameter property="transformedData" jdbcType="CLOB" />
		<parameter property="encodedData" jdbcType="CLOB" />
		<parameter property="errors" jdbcType="CLOB" />
		<parameter property="correlationId" jdbcType="VARCHAR" />
		<parameter property="connectorMap" jdbcType="CLOB" />
		<parameter property="channelMap" jdbcType="CLOB" />
		<parameter property="responseMap" jdbcType="CLOB" />	
		<parameter property="id" jdbcType="VARCHAR" />			
	</parameterMap>

	<resultMap class="com.webreach.mirth.model.MessageObject" id="get-message-result">
		<result property="id" column="ID" />
		<result property="serverId" column="SERVER_ID" />
		<result property="channelId" column="CHANNEL_ID" />
		<result property="source" column="SOURCE" />
		<result property="type" column="TYPE" />
		<result property="dateCreated" column="DATE_CREATED" />
		<result property="version" column="VERSION" />
		<result property="encrypted" column="IS_ENCRYPTED" />
		<result property="status" column="STATUS" />
		<result property="rawData" column="RAW_DATA" />
		<result property="rawDataProtocol" column="RAW_DATA_PROTOCOL" />
		<result property="transformedData" column="TRANSFORMED_DATA" />
		<result property="transformedDataProtocol" column="TRANSFORMED_DATA_PROTOCOL" />
		<result property="encodedData" column="ENCODED_DATA" />
		<result property="encodedDataProtocol" column="ENCODED_DATA_PROTOCOL" />
		<result property="connectorName" column="CONNECTOR_NAME" />
		<result property="errors" column="ERRORS" />
		<result property="correlationId" column="CORRELATION_ID" />
		<result property="connectorMap" column="CONNECTOR_MAP" />
		<result property="channelMap" column="CHANNEL_MAP" />
		<result property="responseMap" column="RESPONSE_MAP" />
	</resultMap>

	<sql id="messageFilterCriteria">
		<dynamic prepend="WHERE">
			<isNotNull prepend="AND" property="id">
				ID = '$id$'
			</isNotNull>
			<isNotNull prepend="AND" property="channelId">
				CHANNEL_ID = '$channelId$'
			</isNotNull>
			<isNotNull prepend="AND" property="source">
				SOURCE = '$source$'
			</isNotNull>
			<isNotNull prepend="AND" property="type">
				TYPE = '$type$'
			</isNotNull>
			<isNotNull prepend="AND" property="status">
				STATUS = '$status$'
			</isNotNull>
			<isNotNull prepend="AND" property="protocol">
				RAW_DATA_PROTOCOL = '$protocol$'
			</isNotNull>			
			<isNotNull prepend="AND" property="connectorName">
				CONNECTOR_NAME = '$connectorName$'
			</isNotNull>
			<isNotNull prepend="AND" property="startDate">
				DATE_CREATED <![CDATA[ >= ]]> '$startDate$'
			</isNotNull>
			<isNotNull prepend="AND" property="endDate">
				DATE_CREATED <![CDATA[ <= ]]> '$endDate$'
			</isNotNull>
		</dynamic>
	</sql>
	
	<select id="getMessageCount" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(*) AS VALUE
		FROM MESSAGE
		WHERE ID = #id#	
	</select>
	
	<select id="getMessageByPage" parameterClass="java.util.Map" resultMap="get-message-result">
		SELECT
			MESSAGE.*
		FROM
			MSG_TMP_$uid$ AS TEMP_TABLE,
			MESSAGE
		WHERE
			TEMP_TABLE.ID = MESSAGE.SEQUENCE_ID
			<dynamic prepend="AND">
				<isNotNull property="first">
					<isNotNull property="last">
						TEMP_TABLE.SEQUENCE_ORDER BETWEEN #first# AND #last#
					</isNotNull>
				</isNotNull>
			</dynamic>
		ORDER BY TEMP_TABLE.DATE_CREATED DESC
	</select>

<!-- Uncomment to enable fast paging by limit.  However, there will be no "last page", because the last pages will always display the last $pageSize$ results.

	<select id="getMessageByPageLimit" parameterClass="java.util.Map" resultMap="get-message-result">
		SELECT * FROM (
			SELECT TOP $limit$ * FROM (
				SELECT TOP ($offset$ + $limit$)
					MESSAGE.*
				FROM
					MESSAGE
				<include refid="messageFilterCriteria" />
				ORDER BY DATE_CREATED DESC
			) AS OFFSETANDLIMIT ORDER BY DATE_CREATED ASC
		) AS PAGE ORDER BY DATE_CREATED DESC
	</select>
	
-->

	<statement id="dropTempMessageTable" parameterClass="java.lang.String">
		DROP TABLE MSG_TMP_$uid$
	</statement>

	<statement id="createTempMessageTable" parameterClass="java.lang.String">
		CREATE TABLE MSG_TMP_$uid$ (ID INTEGER, SEQUENCE_ORDER INTEGER IDENTITY (1, 1) NOT NULL, DATE_CREATED TIMESTAMP)
	</statement>

	<statement id="createTempMessageTableIndex" parameterClass="java.lang.String">
		CREATE INDEX IDX_MSG_TMP_$uid$ ON MSG_TMP_$uid$ (SEQUENCE_ORDER, ID)
	</statement>

	<!-- NOTE: The nested SELECT needs an ORDER BY DATE_CREATED, which Derby does not support -->
	<insert id="populateTempMessageTable" parameterClass="java.util.Map">
		INSERT INTO MSG_TMP_$uid$ (ID)
			(SELECT SEQUENCE_ID
			FROM MESSAGE
			<include refid="messageFilterCriteria" />)
	</insert>
	
	<insert id="insertMessage" parameterMap="insert-message-param">
		INSERT INTO
		MESSAGE (ID, SERVER_ID, CHANNEL_ID, SOURCE, TYPE, DATE_CREATED, VERSION, IS_ENCRYPTED, STATUS, RAW_DATA, RAW_DATA_PROTOCOL, TRANSFORMED_DATA, TRANSFORMED_DATA_PROTOCOL, ENCODED_DATA, ENCODED_DATA_PROTOCOL, CONNECTOR_NAME, ERRORS, CORRELATION_ID, CONNECTOR_MAP, CHANNEL_MAP, RESPONSE_MAP)
		VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
	</insert>
	
	<update id="updateMessage" parameterMap="update-message-param">
		UPDATE MESSAGE
		SET STATUS = ?,
			RAW_DATA = ?,
			TRANSFORMED_DATA = ?,
			ENCODED_DATA = ?,
			ERRORS = ?,
			CORRELATION_ID = ?,
			CONNECTOR_MAP = ?,
			CHANNEL_MAP = ?,
			RESPONSE_MAP = ?
		WHERE ID = ?
	</update>
	
	<delete id="deleteMessage" parameterClass="java.util.Map">
		DELETE FROM MESSAGE
		<include refid="messageFilterCriteria" />
	</delete>
	
	<delete id="deleteTempMessageTable" parameterClass="java.lang.String">
		DROP TABLE MSG_TMP_$uid$
	</delete>

	<delete id="deleteTempMessageTableIndex" parameterClass="java.lang.String">
		DROP INDEX IDX_MSG_TMP_$uid$
	</delete>
	
</sqlMap>