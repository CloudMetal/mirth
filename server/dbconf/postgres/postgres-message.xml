<?xml version='1.0' encoding='UTF-8'?><!DOCTYPE mapper PUBLIC '-//mybatis.org//DTD Mapper 3.0//EN' 'conf/dtd/mybatis-3-mapper.dtd'>

<mapper namespace="Message">
	<resultMap id="connectorMessage" type="ConnectorMessage">		
		<id property="messageId" column="message_id" />
		<id property="metaDataId" column="id" />
		<result property="connectorName" column="connector_name" />
		<result property="serverId" column="server_id" />
		<result property="receivedDate" column="received_date" />
		<result property="status" column="status" />
		<result property="sendAttempts" column="send_attempts" />
		<result property="sendDate" column="send_date" />
		<result property="responseDate" column="response_date" />
		<result property="errorCode" column="error_code" />
		<result property="chainId" column="chain_id" />
		<result property="orderId" column="order_id" />
		<collection property="metaDataMap" column="{localChannelId=local_channel_id,messageId=message_id,metaDataId=id}" ofType="map" select="selectCustomMetaData" />
	</resultMap>
	
	<resultMap id="messageContent" type="com.mirth.connect.donkey.model.message.MessageContent">
		<id property="messageId" column="message_id" />
		<id property="metaDataId" column="metadata_id" />
		<result property="contentType" column="content_type" typeHandler="com.mirth.connect.server.sqlmap.extensions.ContentTypeHandler" />
		<result property="content" column="content" />
		<result property="dataType" column="data_type" />
		<result property="encrypted" column="is_encrypted" />
	</resultMap>
	
	<resultMap id="messageSearchResult" type="MessageSearchResult">
		<result property="messageId" column="id" />
		<result property="serverId" column="server_id" />
		<result property="receivedDate" column="received_date" />
		<result property="processed" column="processed" />
		<result property="importId" column="import_id" />
		<result property="importChannelId" column="import_channel_id" />
		<result property="metaDataIds" column="metadata_ids" />
	</resultMap>
	
	<resultMap id="message" type="Message">
		<result property="messageId" column="id" />
		<result property="serverId" column="server_id" />
		<result property="receivedDate" column="received_date" />
		<result property="processed" column="processed" />
		<result property="importId" column="import_id" />
		<result property="importChannelId" column="import_channel_id" />
	</resultMap>
	
	<resultMap id="pruner-message-map" type="map">
		<result property="id" column="id" javaType="Long" />
		<result property="server_id" column="server_id" javaType="String" />
		<result property="received_date" column="received_date" javaType="java.util.Calendar" />
		<result property="mm_received_date" column="mm_received_date" javaType="java.util.Calendar" />
		<result property="processed" column="processed" javaType="Boolean" />
		<result property="import_id" column="import_id" javaType="Long" />
		<result property="import_channel_id" column="import_channel_id" javaType="String" />
	</resultMap>

	<select id="searchMessages" parameterType="map" resultMap="messageSearchResult">
		SELECT
			message.id,
			message.server_id,
			message.received_date,
			message.processed,
			message.import_id,
			message.import_channel_id,
			metadata_ids

		FROM (
			SELECT m.id, array_to_string(array_agg(mm.id::character varying), ',') AS metadata_ids
			<include refid="searchMessagesBody" />
			GROUP BY m.id
	
			ORDER BY m.id DESC
			
			<if test="offset != null">
				OFFSET ${offset}
			</if>
			<if test="limit != null">
				LIMIT ${limit}
			</if>
			) AS subquery
		INNER JOIN d_m${localChannelId} message ON subquery.id = message.id
		ORDER BY message.id DESC
	</select>
	
	<select id="searchMessagesCount" parameterType="map" resultType="long">
		SELECT COUNT(*) FROM (
			SELECT m.id
			<include refid="searchMessagesBody" />
			GROUP BY m.id
		) AS subquery
	</select>
	
	<select id="selectMessageIdsForReprocessing" parameterType="map" resultType="long">
		SELECT DISTINCT m.id
		<include refid="searchMessagesBody" />
		ORDER BY m.id ASC
	</select>
	
	<select id="selectMessageForReprocessing" parameterType="map" resultMap="messageContent">
		SELECT message_id, metadata_id, content_type, content, data_type, is_encrypted
		FROM d_mc${localChannelId}
		WHERE message_id = #{messageId}
		AND metadata_id = 0
		AND content_type = 1
	</select>
	
	<sql id="searchMessagesBody">
		FROM d_m${localChannelId} m
		JOIN d_mm${localChannelId} mm ON mm.message_id = m.id
		
		<if test="textSearch != null || metaDataSearch != null">
			LEFT JOIN d_mcm${localChannelId} mcm ON mcm.message_id = mm.message_id AND mcm.metadata_id = mm.id
		</if>
		
		<if test="contentSearch != null">
			<foreach item="element" collection="contentSearch">
				LEFT JOIN d_mc${localChannelId} mc_${element.contentCode} ON mc_${element.contentCode}.message_id = m.id AND mc_${element.contentCode}.is_encrypted = FALSE
				
				<choose>
					<!-- If the content code is RAW, use the source ENCODED for destination RAW -->
					<when test="element.contentCode == 1">
						AND mc_${element.contentCode}.metadata_id = 0 AND ((mm.id = 0 AND mc_${element.contentCode}.content_type = 1) OR (mm.id > 0 AND mc_${element.contentCode}.content_type = 4))
					</when>
					<otherwise>
						AND mc_${element.contentCode}.metadata_id = mm.id AND mc_${element.contentCode}.content_type = #{element.contentCode}
					</otherwise>
				</choose>
			</foreach>
		</if>
		
		<where>
			<if test="messageIdLower != null">
				m.id <![CDATA[ >= ]]> #{messageIdLower}
			</if>
			<if test="messageIdUpper != null">
				AND m.id <![CDATA[ <= ]]> #{messageIdUpper}
			</if>
			<if test="maxMessageId != null">
				AND m.id <![CDATA[ <= ]]> #{maxMessageId}
			</if>
			<if test="startDate != null">
				AND m.received_date <![CDATA[ >= ]]> #{startDate}
			</if>
			<if test="endDate != null">
				AND m.received_date <![CDATA[ <= ]]> #{endDate}
			</if>
			<if test="serverId != null">
				AND m.server_id ILIKE '%' || #{serverId} || '%'
			</if>
			<if test="importIdLower != null">
				AND m.import_id <![CDATA[ >= ]]> #{importIdLower}
			</if>
			<if test="importIdUpper != null">
				AND m.import_id <![CDATA[ <= ]]> #{importIdUpper}
			</if>
			<if test="textSearch != null">
				AND (
				m.id::varchar ILIKE '%' || #{textSearch} || '%'
				OR mm.connector_name ILIKE '%' || #{textSearch} || '%'
				
				<if test="contentSearch != null">
					<foreach item="element" collection="contentSearch">
						OR mc_${element.contentCode}.content ILIKE '%' || #{textSearch} || '%'
					</foreach>
				</if>
				
				<foreach item="column" collection="textSearchMetaDataColumns">
					OR mcm."${column}" ILIKE '%' || #{textSearch} || '%'
				</foreach>
				)
			</if>
			<if test="statuses != null">
				AND mm.status IN
				<foreach item="status" collection="statuses" open="(" separator="," close=")">
					#{status}
				</foreach>
			</if>
			<if test="includedMetaDataIds != null">
				AND mm.id IN
				<foreach item="metaDataId" collection="includedMetaDataIds" open="(" separator="," close=")">
					#{metaDataId}
				</foreach>
			</if>
			<if test="excludedMetaDataIds != null">
				AND mm.id NOT IN
				<foreach item="metaDataId" collection="excludedMetaDataIds" open="(" separator="," close=")">
					#{metaDataId}
				</foreach>
			</if>
			
			<if test="contentSearch != null">
				<foreach item="element" collection="contentSearch">
					<foreach item="searchString" collection="element.searches">
						AND mc_${element.contentCode}.content ILIKE '%' || #{searchString} || '%'
					</foreach>
				</foreach>
			</if>
			
			<if test="sendAttemptsLower != null">
				AND mm.send_attempts <![CDATA[ >= ]]> #{sendAttemptsLower}
			</if>
			<if test="sendAttemptsUpper != null">
				AND mm.send_attempts <![CDATA[ <= ]]> #{sendAttemptsUpper}
			</if>
			<if test="attachment != null and attachment == true">
				AND EXISTS (SELECT 1 FROM d_ma${localChannelId} ma WHERE ma.message_id = m.id)
			</if>
			<if test="error != null and error == true">
				AND mm.error_code <![CDATA[ > ]]> 0
			</if>
			<if test="metaDataSearch != null">
				<foreach item="element" collection="metaDataSearch">
				AND mcm."${element.columnName}"
				
				<choose>
					<when test="element.operator == 'EQUAL'">
						<choose>
							<when test="element.ignoreCase">
								ILIKE
							</when>
							<otherwise>
								<![CDATA[ = ]]>
							</otherwise>
						</choose>
					</when>
					<when test="element.operator == 'NOT_EQUAL'">
						<choose>
							<when test="element.ignoreCase">
								NOT ILIKE
							</when>
							<otherwise>
								<![CDATA[ != ]]>
							</otherwise>
						</choose>
					</when>
					<when test="element.operator == 'LESS_THAN'">
						<![CDATA[ < ]]> 
					</when>
					<when test="element.operator == 'LESS_THAN_OR_EQUAL'">
						<![CDATA[ <= ]]> 
					</when>
					<when test="element.operator == 'GREATER_THAN'">
						<![CDATA[ > ]]> 
					</when>
					<when test="element.operator == 'GREATER_THAN_OR_EQUAL'">
						<![CDATA[ >= ]]> 
					</when>
					<when test="element.operator == 'CONTAINS' || element.operator == 'STARTS_WITH' || element.operator == 'ENDS_WITH'">
						<choose>
							<when test="element.ignoreCase">
								ILIKE
							</when>
							<otherwise>
								LIKE
							</otherwise>
						</choose>
					</when>
				</choose>
				
				<if test="element.operator == 'CONTAINS' || element.operator == 'ENDS_WITH'">
					'%' ||
				</if>
					#{element.value}
				<if test="element.operator == 'CONTAINS' || element.operator == 'STARTS_WITH'">
					|| '%'
				</if>	
					
				</foreach>
			</if>
			
			
		</where>
	</sql>
	
	<select id="selectMessageById" resultMap="message">
		SELECT
			id,
			server_id,
			received_date,
			processed,
			import_id,
			import_channel_id

		FROM d_m${localChannelId}
		WHERE id = #{messageId}
	</select>
	
	<select id="selectMessageContent" resultMap="messageContent">
		SELECT *
		FROM d_mc${localChannelId}
		WHERE message_id = #{messageId}
		AND metadata_id IN
		<foreach item="metaDataId" collection="metaDataIds" open="(" separator="," close=")">
			#{metaDataId}
		</foreach>
	</select>
	
	<select id="selectMessageAttachmentIds" parameterType="map" resultType="Attachment">
		SELECT id, type from d_ma${localChannelId}
		WHERE message_id = #{messageId}
		GROUP BY id, type
	</select>
	
	
	
	<!-- Data Pruner -->
	
	<delete id="pruneMessages" parameterType="map">
		<choose>
			<when test="limit == null">
				DELETE FROM d_m${localChannelId} m
			
				<if test="dateThreshold != null">
					USING d_mm${localChannelId} mm
				</if>
				
				<where>
					<include refid="pruneWhere" />
					
					<if test="dateThreshold != null">
						AND mm.message_id = m.id AND mm.id = 0 AND mm.received_date <![CDATA[ < ]]> #{dateThreshold}
					</if>
				</where>
			</when>
			<otherwise>
				DELETE FROM d_m${localChannelId}
				WHERE id IN (
					SELECT m.id
					FROM d_m${localChannelId} m
					<if test="dateThreshold != null">
						JOIN d_mm${localChannelId} mm0 ON mm0.message_id = m.id AND mm0.id = 0 AND mm0.received_date <![CDATA[ < ]]> #{dateThreshold}
					</if>
					
					<where>
						<include refid="pruneWhere" />
					</where>
					
					LIMIT #{limit}
				)
			</otherwise>
		</choose>
	</delete>
	
	<delete id="pruneMessageContent" parameterType="map">
		DELETE FROM d_mc${localChannelId} mc
		
		<choose>
			<when test="limit == null">
				USING d_m${localChannelId} m
				
				<if test="dateThreshold != null">
					, d_mm${localChannelId} mm
				</if>
				
				<where>
					<include refid="pruneWhere" />
					AND mc.message_id = m.id
					
					<if test="dateThreshold != null">
						AND mm.message_id = mc.message_id AND mm.id = 0 AND mm.received_date <![CDATA[ < ]]> #{dateThreshold}
					</if>
				</where>
			</when>
			<otherwise>
				WHERE message_id IN (
					SELECT mc.message_id
					FROM d_mc${localChannelId} mc
					JOIN d_m${localChannelId} m ON m.id = mc.message_id
					<if test="dateThreshold != null">
						JOIN d_mm${localChannelId} mm0 ON mm0.message_id = m.id AND mm0.id = 0 AND mm0.received_date <![CDATA[ < ]]> #{dateThreshold}
					</if>
					<where>
						<include refid="pruneWhere" />
					</where>
					LIMIT #{limit}
				)
			</otherwise>
		</choose>
	</delete>
	
	<sql id="pruneWhere">
	
		<!-- The following criteria are intended to be used only by the archiver, or the pruner if there is no archiver. -->
		
		<if test="skipIncomplete == true">
			m.processed = TRUE
		</if>
		
		<if test="skipStatuses != null">
			AND NOT EXISTS (
				SELECT 1
				FROM d_mm${localChannelId} mm
				WHERE mm.message_id = m.id
				AND mm.status IN
				<foreach item="status" collection="skipStatuses" open="(" separator="," close=")">
					#{status}
				</foreach>
			)
		</if>
		
				
		<!-- The following criteria are intended to be used only by the pruner to constrain pruning to messages that were archived. -->
		
		<if test="includeMessageList != null">
			AND m.id IN (${includeMessageList})
		</if>
		
		<if test="excludeMessageList != null">
			AND m.id NOT IN (${excludeMessageList})
		</if>
		
		<if test="includeMessageRanges != null">
			AND
			<foreach item="range" collection="includeMessageRanges" open="(" separator="OR" close=")">
				m.id BETWEEN #{range[0]} AND #{range[1]}
			</foreach>
		</if>
		
		<if test="excludeMessageRanges != null">
			AND
			<foreach item="range" collection="excludeMessageRanges" open="(" separator="AND" close=")">
				m.id NOT BETWEEN #{range[0]} AND #{range[1]}
			</foreach>
		</if>

		<if test="minMessageId != null and maxMessageId != null">
			AND m.id BETWEEN #{minMessageId} AND #{maxMessageId}
		</if>
	</sql>

	<select id="getMessagesToPrune" parameterType="map" resultMap="pruner-message-map">
		SELECT
			m.id,
			m.server_id,
			m.received_date,
			m.processed,
			m.import_id,
			m.import_channel_id,
			mm.received_date AS mm_received_date

		FROM d_m${localChannelId} m
		JOIN d_mm${localChannelId} mm ON mm.message_id = m.id AND mm.id = 0
		
		<if test="skipStatuses != null">
			LEFT JOIN d_mm${localChannelId} mm_skip ON mm_skip.message_id = m.id AND mm_skip.status IN
			<foreach item="status" collection="skipStatuses" open="(" separator="," close=")">
				#{status}
			</foreach>
		</if>
	
		WHERE mm.received_date <![CDATA[ < ]]> #{dateThreshold}
		
		<if test="skipIncomplete == true">
			AND m.processed = TRUE
		</if>
		
		<if test="skipStatuses != null">
			AND mm_skip.id IS NULL
		</if>
		
		ORDER BY m.id
		
		<if test="offset != null">
			OFFSET #{offset}
		</if>

		<if test="limit != null">
			LIMIT #{limit}
		</if>
	</select>
	
	<update id="pruneEvents" parameterType="map">
		DELETE FROM event
		WHERE date_created <![CDATA[ < ]]> #{dateThreshold}
	</update>
</mapper>